<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.cbioportal.persistence.mybatisclickhouse.StudyViewMapper">

    <!-- for /filtered-sample/fetch (returns Sample objects) -->
    <select id="getFilteredSamples" resultType="org.cbioportal.model.Sample">
        SELECT
            patient_stable_id as patientStableId,
            sample_stable_id as stableId,
            cancer_study_identifier as cancerStudyIdentifier,
            sample_unique_id_base64 as uniqueSampleKey,
            patient_unique_id_base64 as uniquePatientKey
        FROM sample_derived
        <where>
            <include refid="applyStudyViewFilter">
                <property name="filter_type" value="'SAMPLE_AND_PATIENT_ID'"/>
            </include>
        </where>
        ORDER BY sample_stable_id ASC;
    </select>

    <!-- /mutated-genes/fetch (returns AlterationCountByGene) -->
    <select id="getMutatedGenes" resultType="org.cbioportal.model.AlterationCountByGene">
        SELECT
            hugo_gene_symbol as hugoGeneSymbol,
            1 as entrezGeneId,
            COUNT(DISTINCT sample_unique_id) as numberOfAlteredCases,
            COUNT(*) as totalCount
        FROM genomic_event_derived
        <where>
            variant_type = 'mutation' AND
            <include refid="applyStudyViewFilter">
                <property name="filter_type" value="'SAMPLE_AND_PATIENT_ID'"/>
            </include>
            <if test="alterationFilterHelper.shouldApplyMutationAlterationFilter()">
                <include refid="mutationAlterationFilter"/>
            </if>
        </where>
        GROUP BY hugo_gene_symbol;
    </select>

    <!-- /cna-genes/fetch (returns CopyNumberCountByGene) -->
    <select id="getCnaGenes" resultType="org.cbioportal.model.CopyNumberCountByGene">
        SELECT
        hugo_gene_symbol as hugoGeneSymbol,
        1 as entrezGeneId,
        cna_alteration as alteration,
        cna_cytoband as cytoband,
        COUNT(DISTINCT sample_unique_id) as numberOfAlteredCases,
        COUNT(*) as totalCount
        FROM genomic_event_derived
        <where>
            variant_type = 'cna' AND
            <include refid="applyStudyViewFilter">
                <property name="filter_type" value="'SAMPLE_AND_PATIENT_ID'"/>
            </include>
            <if test="alterationFilterHelper.shouldApplyCnaAlterationFilter()">
                <include refid="cnaAlterationFilter"/>
            </if>
        </where>
        GROUP BY hugo_gene_symbol, alteration, cytoband;
    </select>

    <select id="getStructuralVariantGenes" resultType="org.cbioportal.model.AlterationCountByGene">
        SELECT
        hugo_gene_symbol as hugoGeneSymbol,
        1 as entrezGeneId,
        COUNT(DISTINCT sample_unique_id) as numberOfAlteredCases,
        COUNT(*) as totalCount
        FROM genomic_event_derived
        <where>
            variant_type = 'structural_variant' AND
            <include refid="applyStudyViewFilter">
                <property name="filter_type" value="'SAMPLE_AND_PATIENT_ID'"/>
            </include>
        </where>
        GROUP BY hugo_gene_symbol;
    </select>

    <select id="getSampleClinicalDataFromStudyViewFilter" resultType="org.cbioportal.model.ClinicalData">
        SELECT
            sample_unique_id as sampleId,
            patient_unique_id as patientId,
            attribute_name as attrId,
            attribute_value as attrValue,
            cancer_study_identifier as studyId
        FROM clinical_data_derived
        <where>
            <include refid="applyStudyViewFilter">
                <property name="filter_type" value="'SAMPLE_ID_ONLY'"/>
            </include>
        </where>
        <if test="attributeIds != null and !attributeIds.isEmpty()">
            AND attribute_name IN
            <foreach item="attributeId" collection="attributeIds" open="(" separator="," close=")">
                #{attributeId}
            </foreach>
        </if>
        AND type = 'sample'
    </select>

    <select id="getPatientClinicalDataFromStudyViewFilter" resultType="org.cbioportal.model.ClinicalData">
        SELECT
            patient_unique_id as patientId,
            attribute_name as attrId,
            attribute_value as attrValue,
            cancer_study_identifier as studyId
        FROM clinical_data_derived
        <where>
            <include refid="applyStudyViewFilter">
                <property name="filter_type" value="'PATIENT_ID_ONLY'"/>
            </include>
        </where>
        <if test="attributeIds != null and !attributeIds.isEmpty()">
            AND attribute_name IN
            <foreach item="attributeId" collection="attributeIds" open="(" separator="," close=")">
                #{attributeId}
            </foreach>
        </if>
        AND type = 'patient'
    </select>
    
    <!-- for /clinical-data-counts/fetch (returns ClinicalData) which will then be converted to clinicalDataCountItems -->
    <select id="getClinicalDataCounts" resultType="org.cbioportal.model.ClinicalDataCount">
        <include refid="getClinicalDataCountsQuerySample" />
        UNION ALL
        <include refid="getClinicalDataCountsQueryPatient" />
    </select>

    <!-- for /molecular-profile-sample-counts/fetch (returns GenomicDataCount) which will then be converted to clinicalDataCountItems -->
    <select id="getGenomicDataCounts" resultType="org.cbioportal.model.GenomicDataCount">
            --we need to derive the alteration type from the stable_id by removing cancer study id
            --this should probaby be refactored at some point but we need to maintain api interface
            SELECT replaceOne(genetic_profile.stable_id, concat(sample_derived.cancer_study_identifier,'_'), '') AS value,
                genetic_profile.stable_id, 
                genetic_profile.name AS label, 
                count(sample_profile.genetic_profile_id) AS count FROM sample_profile 
            LEFT JOIN sample_derived ON sample_profile.sample_id=sample_derived.internal_id
            LEFT JOIN genetic_profile on sample_profile.genetic_profile_id = genetic_profile.genetic_profile_id
            <where>
                <include refid="applyStudyViewFilter">
                    <property name="filter_type" value="'SAMPLE_ID_ONLY'"/>
                </include>
        </where>
        GROUP BY genetic_profile.stable_id, genetic_profile.name, sample_derived.cancer_study_identifier;
    </select>
    

    <!-- for /sample-lists-counts/fetch (returns CaseListDataCount) -->
    <select id="getCaseListDataCounts" resultType="org.cbioportal.model.CaseListDataCount">
        SELECT
            name AS label,
            REPLACE(stable_id, CONCAT(cancer_study_identifier, '_'), '') AS value,
            count(sample_id) AS count
        FROM sample_list_list sll
            LEFT JOIN sample_derived s ON sll.sample_id=s.internal_id
            LEFT JOIN sample_list sl on sll.list_id=sl.list_id
        <where>
            <include refid="applyStudyViewFilter">
                <property name="filter_type" value="'SAMPLE_ID_ONLY'"/>
            </include>
        </where>
        GROUP BY s.cancer_study_identifier, sl.stable_id, sl.name;
    </select>
    

    <sql id="getClinicalDataCountsQuerySample">
        SELECT
        attribute_name as attributeId,
        <include refid="normalizeAttributeValueNA">
            <property name="attribute_value" value="attribute_value"/>
            <property name="as_value" value="value"/>
        </include>,
        count(value) as count
        FROM clinical_data_derived
        <where>
            type='sample' AND
            <include refid="applyStudyViewFilter">
                <property name="filter_type" value="'SAMPLE_ID_ONLY'"/>
            </include>
            <if test="filteredAttributeValues != null and !filteredAttributeValues.isEmpty()">
                AND UPPER(value) NOT IN
                <foreach item="filteredAttributeValue" collection="filteredAttributeValues" open="(" separator="," close=")">
                    #{filteredAttributeValue}
                </foreach> 
            </if>
            AND attribute_name IN
            <foreach item="attributeId" collection="attributeIds" open="(" separator="," close=")">
                #{attributeId}
            </foreach>
        </where>
        GROUP BY attribute_name,
        value
    </sql>

    <sql id="getClinicalDataCountsQueryPatient">
        SELECT
        attribute_name as attributeId,
        <include refid="normalizeAttributeValueNA">
            <property name="attribute_value" value="attribute_value"/>
            <property name="as_value" value="value"/>
        </include>,
        count(value) as count
        FROM clinical_data_derived
        <where>
            type='patient' AND
            <include refid="applyStudyViewFilter">
                <property name="filter_type" value="'PATIENT_ID_ONLY'"/>
            </include>
            <if test="filteredAttributeValues != null and !filteredAttributeValues.isEmpty()">
                AND UPPER(value) NOT IN
                <foreach item="filteredAttributeValue" collection="filteredAttributeValues" open="(" separator="," close=")">
                    #{filteredAttributeValue}
                </foreach>
            </if>
            AND attribute_name IN
            <foreach item="attributeId" collection="attributeIds" open="(" separator="," close=")">
                #{attributeId}
            </foreach>
        </where>
        GROUP BY attribute_name,
        value
    </sql>
    
    <select id="getClinicalAttributes" resultType="org.cbioportal.model.ClinicalAttribute">
        SELECT
            attr_id as attrId,
            datatype as dataType,
            patient_attribute as patientAttribute,
            cs.cancer_study_identifier cancerStudyIdentifier
        FROM clinical_attribute_meta cam
        JOIN cancer_study cs on cs.cancer_study_id = cam.cancer_study_id
    </select>

    <!-- Grab Total Profiled Counts. Currently, this query filters out all samples associated with a Gene Panel WES before
    doing a join on gene_panel_to_gene_derived table. This is to prevent unnecessary stress on the db. For every sample
    associated with a gene panel WES we multiply that row by the number of genes in the gene table. This could be greater
    than 20K genes. This can create a huge join table that can slow down CH tremendously. 
    We compute the WES counts by using the query getSampleProfileCountWithoutPanelData and adding this value to the 
    totalProfiled Count per gene in java.
     -->
    <select id="getTotalProfiledCounts" resultType="org.cbioportal.model.AlterationCountByGene">
        SELECT 
        gene as hugoGeneSymbol,
        COUNT(*) as numberOfProfiledCases
        FROM sample_to_gene_panel_derived stgp
            INNER JOIN gene_panel_to_gene_derived gptg on stgp.gene_panel_id = gptg.gene_panel_id 
        <where>
            stgp.alteration_type = '${alterationType}'
            AND stgp.gene_panel_id != 'WES'
            AND
            <include refid="applyStudyViewFilter">
                <property name="filter_type" value="'SAMPLE_ID_ONLY'"/>
            </include>
        </where>
        GROUP BY gptg.gene;
    </select>
    
    <select id="getSampleProfileCountWithoutPanelData" resultType="int">
       SELECT COUNT(*)
        FROM sample_to_gene_panel_derived
        <where>
            alteration_type = '${alterationType}' AND gene_panel_id = 'WES'
            AND
            <include refid="applyStudyViewFilter">
                <property name="filter_type" value="'SAMPLE_ID_ONLY'"/>
            </include>
        </where>
    </select>
    <!-- Helper query to get counts for totalProfiledCount when no genePanel data is available. 
    When no genePanel data is available we assume the whole genome was sequenced AKA WES (Whole Exome Sequencing). If this 
    is the case we use the current sample count from the cohort as the totalProfiledCount -->
    <select id="getTotalProfiledCountByAlterationType" resultType="int">
        SELECT
        COUNT(DISTINCT sample_unique_id)
        FROM sample_to_gene_panel_derived stgp
        <where>
            stgp.alteration_type = '${alterationType}'
            AND
            <include refid="applyStudyViewFilter">
                <property name="filter_type" value="'SAMPLE_ID_ONLY'"/>
            </include>
        </where>
    </select>
    
    <!-- Helper query to get counts for FilteredSamples. -->
    <select id="getFilteredSamplesCount" resultType="int">
        SELECT
            COUNT(*)
        FROM sample_derived
        <where>
            <include refid="applyStudyViewFilter">
                <property name="filter_type" value="'SAMPLE_AND_PATIENT_ID'"/>
            </include>
        </where>
    </select>
    
    <!-- Get Matching Gene Panel Ids for all Samples after study view filter -->
    <select id="getMatchingGenePanelIds" resultType="org.cbioportal.model.GenePanelToGene">
        SELECT
            gene as hugoGeneSymbol,
            gene_panel_id as genePanelId
        FROM gene_panel_to_gene_derived
        <where>
            gene_panel_id in (
                select distinct gene_panel_id
                from sample_to_gene_panel_derived
                <where>
                    alteration_type = '${alterationType}'
                    AND
                    <include refid="applyStudyViewFilter">
                        <property name="filter_type" value="'SAMPLE_ID_ONLY'"/>
                    </include>
                </where>
            )
        </where>
        GROUP BY gene, gene_panel_id;
    </select>
    
    <select id="getClinicalEventTypeCounts" resultType="org.cbioportal.model.ClinicalEventTypeCount">
        SELECT 
            event_type as eventType,
            count(DISTINCT patient_unique_id) as count
        FROM clinical_event_derived
        <where>
            <include refid="applyStudyViewFilter">
                <property name="filter_type" value="'PATIENT_ID_ONLY'"/>
            </include>
        </where>
        GROUP BY event_type;
    </select>

    <select id="getPatientTreatmentCounts" resultType="int">
        SELECT
            count(DISTINCT patient_unique_id) AS totalPatients
        FROM sample_derived
        <where>
            patient_unique_id IN (
                SELECT
                    patient_unique_id
                FROM clinical_event_derived
                <where>
                    event_type = 'Treatment'
                    AND key = 'AGENT'
                    AND
                    <include refid="applyStudyViewFilter">
                        <property name="filter_type" value="'PATIENT_ID_ONLY'"/>
                    </include>
                </where>
            )
        </where>
    </select>
    
   <resultMap id="PatientTreatment" type="org.cbioportal.model.PatientTreatment">
      <constructor>
          <arg column="treatment" javaType="String"/>
          <arg column="count" javaType="_int"/>
      </constructor> 
   </resultMap> 
    <select id="getPatientTreatments" resultMap="PatientTreatment">
        SELECT
        value AS treatment,
        count(DISTINCT patient_unique_id) AS count
        FROM clinical_event_derived
        <where>
            event_type = 'Treatment'
            AND key = 'AGENT'
            AND
            <include refid="applyStudyViewFilter">
                <property name="filter_type" value="'PATIENT_ID_ONLY'"/>
            </include>
        </where>
        GROUP BY value;
    </select>
    
    <select id="getTotalSampleTreatmentCounts" resultType="int"> 
        SELECT
            count(distinct ced.value) AS totalSamples
        FROM clinical_event_derived ced
        <where>
            AND key = 'SAMPLE_ID'
            AND (event_type LIKE 'Sample Acquisition' OR event_type LIKE 'SPECIMEN')
            AND
            concat(ced.cancer_study_identifier, '_', ced.value) IN ( <include refid="sampleUniqueIdsFromStudyViewFilter"/>)
            <if test="applyPatientIdFilters == true">
                AND patient_unique_id IN (<include refid="patientUniqueIdsFromStudyViewFilter"/>)
            </if>
            AND
            patient_unique_id IN (
            SELECT
                patient_unique_id
            FROM clinical_event_derived
            <where>
                event_type = 'Treatment'
                AND key = 'AGENT'
                AND
                <include refid="applyStudyViewFilter">
                    <property name="filter_type" value="'PATIENT_ID_ONLY'"/>
                </include>
            </where>
            )
        </where>
    </select>
    
    <resultMap id="SampleTreatmentCount" type="org.cbioportal.model.SampleTreatment">
        <constructor>
            <arg column="treatment" javaType="String"/>
            <arg column="preSampleCount" javaType="_int"/>
            <arg column="postSampleCount" javaType="_int"/>
        </constructor>
    </resultMap>
    <!-- Count (Pre/Post) Sample Acquisition Events for every Treatment per Patient -->
    <select id="getSampleTreatmentCounts" resultMap="SampleTreatmentCount">
        <!-- Nested sub query to grab minimum sample acquisition event  and also filter out duplicates -->
        WITH sample_acquisition_events AS (
            SELECT
                ced.value AS sample_id,
                ced.patient_unique_id,
                min(ced.start_date) AS time_taken,
                ced.cancer_study_identifier AS cancer_study_identifier
            FROM clinical_event_derived ced
            <where>
                key = 'SAMPLE_ID'
                AND (event_type LIKE 'Sample Acquisition' OR event_type LIKE 'SPECIMEN')
            </where>
            GROUP BY patient_unique_id, ced.value, cancer_study_identifier
        ),
        <!-- Nested sub query to grab minimum treatment event. When there are multiple treatments that are of the same
        type we only care about the first treatment. 
         -->
        treatments AS (
            SELECT 
                patient_unique_id,
                value AS treatment,
                argMin(start_date, start_date) AS treatment_time_taken
            FROM clinical_event_derived
            <where>
                event_type = 'Treatment'
                AND key = 'AGENT'
            </where>
            GROUP BY patient_unique_id, value
        )
        SELECT
            countIf(ced.sample_id,ced.time_taken &lt;= treatments.treatment_time_taken) AS preSampleCount,
            countIf(ced.sample_id, ced.time_taken &gt; treatments.treatment_time_taken) AS postSampleCount,
            treatments.treatment AS treatment
        FROM sample_acquisition_events ced
            INNER JOIN treatments ON treatments.patient_unique_id = ced.patient_unique_id
        <where>
            concat(ced.cancer_study_identifier, '_', ced.sample_id) IN ( <include refid="sampleUniqueIdsFromStudyViewFilter"/>)
            <if test="applyPatientIdFilters == true">
                AND patient_unique_id IN (<include refid="patientUniqueIdsFromStudyViewFilter"/>)
            </if>
        </where>
        GROUP BY treatments.treatment;
    </select>
    
    <!-- 
        Abstraction for StudyViewFilter. Currently, we have many ch tables that have both
        sample_unique_id and patient_unique_id. Also, we have some edges cases were tables only have patient_unique_id
        or sample_unique_id (i.e. clinical_event_derived). This forces the filtering (where clause) to convert the 
        patient_unique_id(s) to a list of sample_unique_id(s). So we have three separate modes:
     
        SAMPLE_ID_ONLY - Forces all filters that use patient_unique_ids to be converted to list of sample_unique_id(s) and 
                      is applied to the where clause.
     
        PATIENT_ID_ONLY - Forces all sample_unique_id(s) to be converted to list of Patients before applying where clause.
     
        Otherwise - The table can be filtered on both patient id(s) and sample id(s)
     -->
    <sql id="applyStudyViewFilter">
        <choose>
            <when test="${filter_type} == 'SAMPLE_ID_ONLY' ">
               <include refid="applyStudyViewFilterUsingSampleId"/> 
            </when>
            <when test="${filter_type} == 'PATIENT_ID_ONLY'">
                <include refid="applyStudyViewFilterUsingPatientId"/>
            </when>
            <otherwise>
                sample_unique_id IN ( <include refid="sampleUniqueIdsFromStudyViewFilter"/>)
                <if test="applyPatientIdFilters == true">
                    AND patient_unique_id IN (<include refid="patientUniqueIdsFromStudyViewFilter"/>)
                </if>            
            </otherwise>
        </choose>
    </sql>
    
    <sql id="applyStudyViewFilterUsingPatientId">
        patient_unique_id in (
        SELECT patient_unique_id
        FROM sample_derived
        <where>
            sample_unique_id IN (<include refid="sampleUniqueIdsFromStudyViewFilter"/>)
        </where>

        <if test="applyPatientIdFilters == true">
            INTERSECT
            <include refid="patientUniqueIdsFromStudyViewFilter"/>
        </if>
        )
    </sql>
     
    <sql id="applyStudyViewFilterUsingSampleId">
        sample_unique_id IN (<include refid="sampleUniqueIdsFromStudyViewFilter"/>
            <if test="applyPatientIdFilters == true">
                INTERSECT <include refid="getSampleIdsFromPatientIds"/>
            </if>
        )
    </sql>

    <sql id="getSampleIdsFromPatientIds">
        SELECT sample_unique_id
        FROM sample_derived
        <where>
            patient_unique_id IN (<include refid="patientUniqueIdsFromStudyViewFilter"/>)
        </where>
    </sql>
    
    <!-- This is to match actual NA values ('NA', 'NAN', and 'N/A') in addition to the empty string -->
    <sql id="isAttributeValueNA">
        ${attribute_value}=''
        OR upperUTF8(${attribute_value})='NA'
        OR upperUTF8(${attribute_value})='NAN'
        OR upperUTF8(${attribute_value})='N/A'
    </sql>
    
    <sql id="normalizeAttributeValueNA">
        if(
          <include refid="isAttributeValueNA">
              <property name="attribute_value" value="${attribute_value}"/>
          </include>,
          'NA',
          ${attribute_value}
        )
        AS ${as_value}
    </sql>
</mapper>
