<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
        namespace="org.cbioportal.infrastructure.repository.clickhouse.clinical_data.ClickhouseClinicalDataMapper">

    <select id="getSampleClinicalDataFromStudyViewFilter" resultType="org.cbioportal.legacy.model.ClinicalData">
        SELECT
        internal_id as internalId,
        replaceOne(sample_unique_id, concat(cancer_study_identifier, '_'), '') as sampleId,
        replaceOne(patient_unique_id, concat(cancer_study_identifier, '_'), '') as patientId,
        attribute_name as attrId,
        attribute_value as attrValue,
        cancer_study_identifier as studyId
        FROM clinical_data_derived
        <where>
            <include refid="org.cbioportal.infrastructure.repository.clickhouse.studyview.ClickhouseStudyViewFilterMapper.applyStudyViewFilterUsingSampleId"/>
        </where>
        <if test="attributeIds != null and !attributeIds.isEmpty()">
            AND attribute_name IN
            <foreach item="attributeId" collection="attributeIds" open="(" separator="," close=")">
                #{attributeId}
            </foreach>
        </if>
        AND type = 'sample'
    </select>

    <select id="getPatientClinicalDataFromStudyViewFilter" resultType="org.cbioportal.legacy.model.ClinicalData">
        SELECT
        internal_id as internalId,
        replaceOne(patient_unique_id, concat(cancer_study_identifier, '_'), '') as patientId,
        attribute_name as attrId,
        attribute_value as attrValue,
        cancer_study_identifier as studyId
        FROM clinical_data_derived
        <where>
            <include refid="org.cbioportal.infrastructure.repository.clickhouse.studyview.ClickhouseStudyViewFilterMapper.applyStudyViewFilterUsingPatientId"/>
        </where>
        <if test="attributeIds != null and !attributeIds.isEmpty()">
            AND attribute_name IN
            <foreach item="attributeId" collection="attributeIds" open="(" separator="," close=")">
                #{attributeId}
            </foreach>
        </if>
        AND type = 'patient'
    </select>

    <!-- for /clinical-data-counts/fetch (returns ClinicalData) which will then be converted to clinicalDataCountItems -->
    <select id="getClinicalDataCounts" resultMap="ClinicalDataCountItemResultMap">
        <include refid="getClinicalDataCountsQuery">
            <property name="type" value="sample"/>
        </include>
        UNION ALL
        <include refid="getClinicalDataCountsQuery">
            <property name="type" value="patient"/>
        </include>
    </select>

    <sql id="getClinicalDataCountsQuery">
        (
        -- Step 1: Find studies that have this attribute type, sample or patient
        WITH studies_with_attribute_type AS (
            SELECT DISTINCT
                cs.cancer_study_identifier,
                cam.attr_id AS attribute_name
            FROM clinical_attribute_meta cam
            JOIN cancer_study cs ON cam.cancer_study_id = cs.cancer_study_id
            WHERE
                <choose>
                    <when test="'${type}' == 'sample'">
                        cam.patient_attribute = 0
                    </when>
                    <otherwise>
                        cam.patient_attribute = 1
                    </otherwise>
                </choose>
                AND cam.attr_id IN
                <foreach item="attributeId" collection="attributeIds" open="(" separator="," close=")">
                    #{attributeId}
                </foreach>
                <if test="studyViewFilterContext.customDataFilterCancerStudies != null and !studyViewFilterContext.customDataFilterCancerStudies.isEmpty()">
                    AND cs.cancer_study_identifier IN
                    <foreach item="studyId" collection="studyViewFilterContext.customDataFilterCancerStudies" open="(" separator="," close=")">
                        #{studyId}
                    </foreach>
                </if>
        ),

        -- Step 2: Get total count of samples/patients with this attribute type from step 1
        total_counts_in_attribute_type AS (
            SELECT
                swat.attribute_name AS attributeId,
                <choose>
                    <when test="'${type}' == 'sample'">
                        count(DISTINCT sd.sample_unique_id) AS total_count
                    </when>
                    <otherwise>
                        count(DISTINCT sd.patient_unique_id) AS total_count
                    </otherwise>
                </choose>
            FROM studies_with_attribute_type swat
            JOIN sample_derived sd ON swat.cancer_study_identifier = sd.cancer_study_identifier
            WHERE
                <choose>
                    <when test="'${type}' == 'sample'">
                        <include refid="org.cbioportal.infrastructure.repository.clickhouse.studyview.ClickhouseStudyViewFilterMapper.applyStudyViewFilterUsingSampleId"/>
                    </when>
                    <otherwise>
                        <include refid="org.cbioportal.infrastructure.repository.clickhouse.studyview.ClickhouseStudyViewFilterMapper.applyStudyViewFilterUsingPatientId"/>
                    </otherwise>
                </choose>
            GROUP BY swat.attribute_name
        ),

        -- Step 3: Get clinical data counts with values on this attribute type, exclude NA
        clinical_data_counts_with_values AS (
            SELECT
                attribute_name AS attributeId,
                attribute_value AS value,
                cast(count(*) AS INTEGER) as count
            FROM clinical_data_derived
            WHERE type='${type}'
                AND <!-- Table creation in clickhouse.sql has ensured no NA values but extra caution is always appreciated -->
                <include refid="org.cbioportal.infrastructure.repository.clickhouse.studyview.ClickhouseStudyViewFilterMapper.normalizeAttributeValue">
                    <property name="attribute_value" value="attribute_value"/>
                </include>
                != 'NA'
                AND
                <choose>
                    <when test="'${type}' == 'sample'">
                        <include refid="org.cbioportal.infrastructure.repository.clickhouse.studyview.ClickhouseStudyViewFilterMapper.applyStudyViewFilterUsingSampleId"/>
                    </when>
                    <otherwise>
                        <include refid="org.cbioportal.infrastructure.repository.clickhouse.studyview.ClickhouseStudyViewFilterMapper.applyStudyViewFilterUsingPatientId"/>
                    </otherwise>
                </choose>
                AND attribute_name IN
                <foreach item="attributeId" collection="attributeIds" open="(" separator="," close=")">
                    #{attributeId}
                </foreach>
            GROUP BY attribute_name, attribute_value
        ),

        -- Step 4: Get the total count of samples/patients that have values from step 3
        total_count_that_have_values AS (
            SELECT attributeId, sum(count) AS total_count_with_values
            FROM clinical_data_counts_with_values
            GROUP BY attributeId
        )

        -- Step 5: Return clinical data counts with values
        SELECT * FROM clinical_data_counts_with_values

        UNION ALL

        -- Step 6: Calculate and return NA counts (total from step 2 - total with values from step 4 = NA)
        SELECT
            tc.attributeId,
            'NA' AS value,
            (tc.total_count - COALESCE(tcvalues.total_count_with_values, 0)) AS count
        FROM total_counts_in_attribute_type tc
        LEFT JOIN total_count_that_have_values tcvalues ON tc.attributeId = tcvalues.attributeId
        WHERE (tc.total_count - COALESCE(tcvalues.total_count_with_values, 0)) > 0
        )
    </sql>

    <resultMap id="ClinicalDataCountItemResultMap" type="org.cbioportal.legacy.model.ClinicalDataCountItem">
        <result property="attributeId" column="attributeId"/>
        <collection property="counts" ofType="org.cbioportal.legacy.model.ClinicalDataCount">
            <result property="attributeId" column="attributeId"/>
            <result property="value" column="value"/>
            <result property="count" column="count"/>
        </collection>
    </resultMap>
</mapper>