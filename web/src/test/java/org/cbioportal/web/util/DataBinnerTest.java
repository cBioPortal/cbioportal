package org.cbioportal.web.util;

import org.cbioportal.model.ClinicalData;
import org.cbioportal.model.ClinicalDataCountItem.ClinicalDataType;
import org.cbioportal.model.DataBin;
import org.cbioportal.web.parameter.ClinicalDataBinFilter;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;

import java.math.BigDecimal;
import java.util.*;
import java.util.stream.Collectors;

@RunWith(MockitoJUnitRunner.class)
public class DataBinnerTest
{
    private Map<String, String[]> mockData;
    
    private DataBinner dataBinner;

    @Before
    public void setup() {
        StudyViewFilterUtil studyViewFilterUtil = new StudyViewFilterUtil();
        DataBinHelper dataBinHelper = new DataBinHelper(studyViewFilterUtil);
        DiscreteDataBinner discreteDataBinner = new DiscreteDataBinner(dataBinHelper);
        LinearDataBinner linearDataBinner = new LinearDataBinner(dataBinHelper);
        ScientificSmallDataBinner scientificSmallDataBinner = new ScientificSmallDataBinner(dataBinHelper);
        LogScaleDataBinner logScaleDataBinner = new LogScaleDataBinner(dataBinHelper);
        
        dataBinner = new DataBinner(
            dataBinHelper, discreteDataBinner, linearDataBinner, scientificSmallDataBinner, studyViewFilterUtil, logScaleDataBinner);
        
        mockData = initMockData();
    }
    
    public Map<String, String[]> initMockData()
    {
        Map<String, String[]> mockData = new LinkedHashMap<>();

        mockData.put("blca_tcga_AGE", new String[] {
            "34.0","37.0","41.0","42.0","43.0","44.0","45.0","45.0","46.0","47.0","47.0","47.0","47.0","48.0","48.0","48.0","48.0","48.0","48.0","49.0","49.0",
            "49.0","50.0","50.0","50.0","51.0","52.0","52.0","52.0","52.0","52.0","52.0","53.0","53.0","53.0","53.0","54.0","54.0","54.0","54.0","54.0","54.0",
            "54.0","55.0","55.0","55.0","55.0","55.0","55.0","56.0","56.0","56.0","56.0","56.0","56.0","56.0","56.0","56.0","57.0","57.0","57.0","57.0","57.0",
            "57.0","57.0","57.0","57.0","57.0","58.0","58.0","58.0","58.0","58.0","58.0","59.0","59.0","59.0","59.0","59.0","59.0","59.0","59.0","59.0","59.0",
            "59.0","59.0","59.0","59.0","60.0","60.0","60.0","60.0","60.0","60.0","60.0","60.0","60.0","60.0","60.0","60.0","60.0","60.0","60.0","60.0","60.0",
            "60.0","60.0","60.0","61.0","61.0","61.0","61.0","61.0","61.0","61.0","61.0","61.0","61.0","61.0","61.0","62.0","62.0","62.0","62.0","62.0","62.0",
            "62.0","62.0","63.0","63.0","63.0","63.0","63.0","63.0","63.0","63.0","63.0","64.0","64.0","64.0","64.0","64.0","64.0","64.0","64.0","64.0","64.0",
            "64.0","64.0","64.0","65.0","65.0","65.0","65.0","65.0","65.0","65.0","65.0","65.0","65.0","65.0","66.0","66.0","66.0","66.0","66.0","66.0","66.0",
            "66.0","66.0","66.0","66.0","66.0","66.0","66.0","66.0","66.0","66.0","67.0","67.0","67.0","67.0","67.0","67.0","67.0","67.0","67.0","67.0","67.0",
            "67.0","67.0","68.0","68.0","68.0","68.0","68.0","68.0","68.0","68.0","68.0","68.0","68.0","68.0","69.0","69.0","69.0","69.0","69.0","69.0","69.0",
            "69.0","69.0","69.0","69.0","69.0","69.0","70.0","70.0","70.0","70.0","70.0","70.0","70.0","70.0","70.0","70.0","70.0","70.0","70.0","70.0","70.0",
            "70.0","71.0","71.0","71.0","71.0","71.0","71.0","71.0","71.0","72.0","72.0","72.0","72.0","72.0","72.0","72.0","72.0","72.0","72.0","73.0","73.0",
            "73.0","73.0","73.0","73.0","73.0","73.0","73.0","73.0","73.0","73.0","73.0","73.0","73.0","73.0","74.0","74.0","74.0","74.0","74.0","74.0","74.0",
            "74.0","74.0","74.0","74.0","74.0","75.0","75.0","75.0","75.0","75.0","75.0","75.0","75.0","75.0","75.0","75.0","75.0","75.0","75.0","75.0","75.0",
            "75.0","75.0","75.0","75.0","75.0","76.0","76.0","76.0","76.0","76.0","76.0","76.0","76.0","76.0","76.0","76.0","76.0","76.0","76.0","76.0","77.0",
            "77.0","77.0","77.0","77.0","77.0","77.0","77.0","77.0","77.0","77.0","77.0","78.0","78.0","78.0","78.0","78.0","78.0","78.0","78.0","78.0","78.0",
            "78.0","78.0","79.0","79.0","79.0","79.0","79.0","79.0","79.0","79.0","79.0","79.0","79.0","79.0","79.0","80.0","80.0","80.0","80.0","80.0","80.0",
            "80.0","80.0","80.0","80.0","80.0","80.0","81.0","81.0","81.0","81.0","81.0","81.0","81.0","81.0","82.0","82.0","82.0","82.0","82.0","82.0","82.0",
            "82.0","83.0","83.0","83.0","83.0","83.0","83.0","83.0","84.0","84.0","84.0","84.0","84.0","84.0","84.0","85.0","85.0","85.0","85.0","85.0","86.0",
            "86.0","86.0","87.0","87.0","87.0","87.0","87.0","88.0","89.0","90.0","90.0","90.0"
        });

        mockData.put("skcm_broad_AGE_AT_PROCUREMENT", new String[] {
            "72.0","22.0","55.0","57.0","70.0","21.0","67.0","42.0","26.0","54.0","39.0","67.0","46.0","52.0","47.0","53.0","51.0","35.0","53.0","46.0","42.0",
            "31.0","83.0","29.0","52.0","47.0","41.0","35.0","45.0","40.0","50.0","37.0","54.0","71.0","49.0","49.0","56.0","74.0","48.0","48.0","76.0","35.0",
            "67.0","74.0","63.0","47.0","67.0","39.0","31.0","62.0","58.0","65.0","72.0","27.0","59.0","87.0","69.0","41.0","39.0","53.0","17.0","44.0","76.0",
            "51.0","46.0","63.0","41.0","38.0","34.0","69.0","63.0","65.0","59.0","58.0","60.0","56.0","65.0","26.0","58.0","48.0","65.0","44.0","45.0","28.0",
            "46.0","48.0","52.0","52.0","70.0","57.0","63.0","68.0","45.0","51.0","39.0","79.0","53.0","41.0","47.0","39.0","49.0","42.0","37.0","78.0","69.0",
            "33.0","71.0","80.0","49.0","65.0","67.0","70.0","46.0","49.0","63.0","28.0","62.0","27.0","51.0"
        });

        mockData.put("blca_tcga_LYMPH_NODE_EXAMINED_COUNT", new String[] {
            "170.0","141.0","140.0","112.0","111.0","108.0","107.0","104.0","93.0","87.0","86.0","85.0","83.0","79.0","77.0","77.0","76.0","75.0","74.0","73.0",
            "73.0","71.0","71.0","70.0","69.0","68.0","67.0","66.0","65.0","64.0","64.0","62.0","61.0","61.0","60.0","58.0","58.0","57.0","54.0","54.0","53.0","53.0",
            "52.0","51.0","48.0","48.0","48.0","47.0","47.0","47.0","47.0","46.0","46.0","45.0","45.0","44.0","43.0","41.0","41.0","41.0","41.0","40.0","40.0","40.0",
            "38.0","38.0","38.0","37.0","37.0","36.0","36.0","36.0","35.0","34.0","34.0","34.0","34.0","33.0","31.0","31.0","30.0","30.0","30.0","30.0","30.0","29.0",
            "29.0","29.0","28.0","28.0","28.0","28.0","28.0","28.0","28.0","28.0","28.0","28.0","27.0","27.0","27.0","27.0","27.0","27.0","27.0","27.0","27.0","27.0",
            "26.0","26.0","26.0","26.0","25.0","25.0","25.0","25.0","25.0","24.0","24.0","24.0","24.0","24.0","24.0","23.0","23.0","23.0","23.0","23.0","22.0","22.0",
            "22.0","22.0","21.0","21.0","21.0","21.0","21.0","21.0","20.0","20.0","20.0","20.0","19.0","19.0","19.0","19.0","19.0","19.0","19.0","19.0","18.0","18.0",
            "18.0","18.0","18.0","18.0","18.0","18.0","18.0","17.0","17.0","17.0","17.0","17.0","17.0","17.0","16.0","16.0","16.0","16.0","16.0","16.0","16.0","16.0",
            "16.0","16.0","16.0","15.0","15.0","15.0","15.0","15.0","15.0","15.0","15.0","14.0","14.0","14.0","14.0","14.0","14.0","14.0","14.0","14.0","14.0","14.0",
            "14.0","14.0","14.0","14.0","14.0","14.0","14.0","14.0","13.0","13.0","13.0","13.0","13.0","13.0","13.0","13.0","12.0","12.0","12.0","12.0","12.0","12.0",
            "12.0","12.0","12.0","11.0","11.0","11.0","11.0","11.0","11.0","11.0","11.0","11.0","11.0","11.0","10.0","10.0","10.0","10.0","10.0","9.0","9.0","9.0",
            "9.0","9.0","8.0","8.0","8.0","8.0","8.0","8.0","8.0","8.0","8.0","8.0","8.0","8.0","8.0","8.0","8.0","7.0","7.0","7.0","7.0","7.0","7.0","7.0","7.0","6.0","6.0",
            "6.0","6.0","6.0","6.0","6.0","6.0","5.0","5.0","5.0","5.0","5.0","5.0","5.0","5.0","5.0","4.0","4.0","4.0","4.0","4.0","3.0","3.0","3.0","2.0","2.0","2.0","2.0",
            "2.0","2.0","2.0","2.0","2.0","2.0","2.0","1.0","0.0","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA",
            "NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA",
            "NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA",
            "NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA",
            "NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA","NA",
            "NA","NA","NA","NA","NA","NA"
        });

        mockData.put("acyc_fmi_2014_ACTIONABLE_ALTERATIONS", new String[] {
            "1.0","0.0","0.0","2.0","2.0","2.0","1.0","0.0","0.0","1.0","0.0","0.0","0.0","5.0","0.0","0.0","1.0","0.0","2.0","0.0","3.0","0.0","0.0","0.0","1.0","0.0","0.0","1.0"
        });

        mockData.put("blca_dfarber_mskcc_2014_SILENT_RATE", new String[] {
            "2.87E-06","1.92E-06","1.32E-06","1.78E-06","4.93E-06","3.01E-06","3.07E-06","3.67E-06","1.00E-06",
            "1.61E-06","3.05E-08","3.73E-06","2.44E-06","6.03E-07","1.03E-06","1.29E-06","1.00E-06","7.35E-06",
            "1.53E-06","1.64E-06","6.41E-07","7.46E-07","2.99E-06","5.95E-07","1.06E-05","6.87E-07","5.74E-07",
            "3.73E-06","1.22E-06","5.89E-06","5.22E-06","2.55E-06","5.95E-07","4.43E-07","2.87E-06","1.68E-07",
            "2.47E-06","9.10E-06","9.62E-07","1.23E-06","9.77E-07","1.21E-06","3.67E-06","1.06E-06","4.19E-06",
            "1.61E-06","6.60E-07","8.04E-07","5.45E-07","2.04E-06", "NA", "NAN", "N/A"
        });

        mockData.put("acc_tcga_DAYS_TO_BIRTH", new String[] {
            "-21496","-16090","-8624","-8451","-11171","-10839","-11279","-24266","-8175","-19436","-19172","-13862",
            "-20989","-6455","-25502","-22390","-11994","-8177","-24082","-18214","-13155","-9359","-9547","-14667",
            "-9667","-16604","-24017","-23794","-21292","-20319","-17513","-18402","-25190","-22218","-25400","-17596",
            "-11970","-19375","-23481","-21907","-20657","-14435","-22596","-22550","-14606","-16702","-7459","-26404",
            "-16217","-13559","-6250","-20328","-9298","-8745","-15594","-13840","-30535","-24763","-17819","-28270",
            "-22057","-13472","-19526","-19242","-21565","-26084","-19111","-5383","-27179","-16875","-13182","-15536",
            "-20069","-22919","-27607","-8735","-11414","-22370","-13574","-11261","-12663","-21032","-19492","-20106",
            "-16659","-21627","-18926","-15373","-10173","-23345","-23293","-16182"
        });

        mockData.put("ampca_bcm_2016_DAYS_TO_LAST_FOLLOWUP", new String[] {
            "3411.0","2798.0","822.0","523.0","1293.0","836.0","2695.0","1796.0","1734.0","979.0","1813.0","141.0","341.0","1021.0","55.0","832.0","579.0",
            "726.0","665.0","2746.0","1830.0","481.0","2380.0","1210.0","1921.0","765.0","1870.0","2159.0","1746.0","2164.0","537.0","1520.0","250.0",
            "1860.0","363.0","733.0","251.0","290.0","453.0","230.0","2074.0","762.0","192.0","1498.0","172.0","1100.0","1259.0","5768.0","18.0","842.0",
            "4810.0","3239.0","3634.0","2703.0","2191.0","305.0","253.0","1528.0","742.0","1260.0","1331.0","1148.0","307.0","1217.0","1155.0","994.0",
            "736.0","1056.0","952.0","531.0","636.0","901.0","557.0","898.0","240.0","377.0","802.0","919.0","821.0","835.0","556.0","526.0","261.0","562.0",
            "598.0","243.0","383.0","257.0","341.0","886.0","364.0","2441.0","1756.0","1058.0","215.0","2134.0","283.0","2978.0","3154.0","2992.0","494.0",
            "2968.0","2297.0","398.0","2211.0","2208.0","2065.0","2484.0","484.0","13.0","471.0","125.0","2296.0","477.0","838.0","460.0","457.0","18.0",
            "34.0","937.0","2267.0","755.0","3270.0","1267.0","179.0","1438.0","1899.0","59.0","1581.0","1323.0","1067.0","178.0","482.0","824.0","853.0",
            "876.0","663.0","708.0","711.0","556.0","638.0","1330.0","557.0","180.0","524.0","158.0","380.0","272.0","64.0","2555.0","10.0","374.0","699.0",
            "1446.0","578.0","97.0","233.0","879.0","448.0","651.0"
        });

        mockData.put("genie_INT_DOD", new String[] {
            "23430.0","20626.0","26382.0","22846.0","21047.0","28146.0","24064.0","26000.0","22121.0","16563.0","26681.0","20242.0","29721.0",
            "14095.0","15632.0","27135.0","18821.0","16191.0","18587.0","15939.0","17558.0","17165.0","16308.0","23305.0","17557.0","15944.0",
            "24774.0","18682.0","21975.0","24104.0","26567.0","18647.0","22493.0","16119.0","24928.0","29142.0","<6570.0","24263.0","25236.0",
            "26013.0","22960.0","25002.0","20883.0","19673.0","20122.0","25160.0","15665.0","21131.0","26712.0","15645.0","11500.0","20010.0",
            "22355.0","15527.0","19600.0","18939.0","6978.0","16933.0","30367.0","29048.0","30681.0","21099.0","21270.0","16049.0","24460.0",
            "<6570.0","15319.0","24884.0","20317.0","21380.0","24561.0","23929.0","22852.0","27210.0","22676.0","25305.0","28152.0","25298.0",
            "13225.0","17393.0","18210.0","24940.0","21419.0","20655.0","25118.0","20101.0","9833.0","22682.0","30282.0","23775.0","25193.0",
            "26762.0","15799.0","19930.0","23248.0","13809.0","29925.0","27053.0","15988.0","13564.0","13852.0","26865.0","21416.0","26658.0",
            "24606.0","15218.0","26446.0","18709.0","18072.0","16544.0","19759.0","19167.0","12031.0","19599.0","23655.0","12525.0","21453.0",
            "16980.0","23281.0","19334.0","20892.0","26093.0","22556.0","22486.0","23259.0","14767.0","13641.0","21637.0","22616.0","20408.0",
            "14053.0","22819.0","24263.0","22374.0","27943.0","27309.0","16908.0","18628.0","28846.0","26717.0","21335.0","<6570.0","21923.0",
            "29328.0","25110.0","23146.0","26304.0","<6570.0","25274.0","27153.0","30866.0","26967.0","24853.0","22795.0","28955.0","21310.0",
            "25252.0","16858.0","22786.0","29486.0","22203.0","19297.0","29743.0","25013.0","22353.0","18059.0","29596.0","20594.0","18610.0",
            "17528.0","21178.0",">32485.0","21017.0","30818.0","22339.0","19296.0","26786.0","25080.0","24084.0","27952.0","20470.0","17844.0",
            "22822.0","16961.0","14125.0","23770.0","24414.0","26299.0","21986.0","27407.0","23680.0","19727.0","24865.0","29221.0","13220.0",
            "22555.0","26048.0","21493.0","23526.0","26777.0","25309.0","20682.0","25890.0","23272.0","21223.0","17726.0","25912.0","27609.0",
            "22550.0","20890.0","19001.0","16571.0","17405.0","18575.0","10678.0","16191.0","20917.0","24290.0","25864.0","11642.0","28227.0",
            "24645.0","17803.0","13517.0","24497.0","22063.0","18565.0","11785.0","20367.0","21461.0","10392.0","22530.0","19479.0","23656.0",
            "21495.0","19372.0","13877.0","19928.0","20102.0","27975.0","19541.0","22792.0","19786.0","30469.0","25289.0","22136.0","11122.0",
            "20219.0","25452.0","20915.0","25745.0","17041.0","19595.0","15223.0","18638.0","23342.0","20678.0","20718.0","19683.0","26022.0",
            "19910.0","18233.0","26086.0","18665.0","28321.0","25498.0","22040.0","27769.0","23533.0","18339.0","17194.0","25384.0","30319.0",
            "21446.0","23633.0","21796.0","19476.0","22742.0","28036.0","26086.0","20807.0","18721.0","25613.0","26494.0","21110.0","22571.0",
            "18262.0","21674.0","19526.0","21009.0","20047.0","24120.0","14753.0","14379.0","26269.0","16151.0","23213.0","15963.0","17769.0",
            "19871.0","20623.0","28343.0","24467.0","20843.0","18267.0","17283.0","18663.0","27337.0","23793.0","24626.0","20263.0","24851.0",
            "20607.0","27255.0","19622.0","18364.0","23325.0","21598.0","21830.0","19791.0","22359.0","28918.0","24964.0","24712.0","25695.0",
            "24982.0","24476.0","21297.0","23132.0","29450.0",">32485.0","24645.0","25740.0","25643.0","21793.0","21510.0","28954.0","22882.0",
            "29243.0","24350.0","23305.0","21916.0","12419.0","26817.0","27859.0","17712.0","25946.0","24971.0","24738.0","29361.0","23313.0",
            "22699.0","11141.0","19395.0",">32485.0","27336.0","20452.0","18893.0","19431.0","20232.0","25199.0","24556.0","23656.0","24029.0",
            "26476.0","27039.0","21082.0","31789.0","26925.0","27604.0","22296.0","24333.0","7436.0","13978.0","20030.0","29698.0","28463.0",
            "25555.0","28039.0","27229.0","25463.0","22442.0","20347.0","23507.0","24525.0","27257.0","24588.0","20595.0","21284.0","30495.0",
            "18203.0","24034.0","24221.0","30494.0","18502.0","29325.0","26391.0","23484.0","20253.0","16882.0","26690.0","18580.0","16333.0",
            "24449.0","22478.0","30009.0","8687.0","24291.0","22268.0","24897.0","29726.0","21457.0","19454.0","18957.0","19353.0","17397.0",
            "20636.0","25080.0","20236.0","25866.0","20577.0","23954.0","29294.0","24174.0","<6570.0","31901.0","21034.0","18472.0","24370.0",
            "26699.0","18692.0","22945.0","26790.0","21859.0","24329.0","21261.0","22805.0","22207.0","23733.0","19847.0","10273.0","20359.0",
            "21887.0","23688.0","12778.0","26623.0","29125.0","18896.0","24605.0","28058.0","22613.0","16694.0","19314.0","25586.0","20084.0",
            "18243.0","25814.0","21583.0","28624.0","26263.0","26953.0","24557.0","25218.0","24934.0","24035.0","18815.0","26319.0","27207.0",
            "23720.0","24956.0","20929.0","27004.0","12603.0","24076.0","23502.0","19296.0","24310.0","21241.0","22137.0","21417.0","20812.0",
            "23619.0","19015.0","12335.0","26523.0","19006.0","20726.0","25090.0","25741.0","24294.0","23722.0","17631.0","24564.0","19322.0",
            "27479.0","12074.0","25989.0","13103.0","19320.0","25805.0","16605.0","23144.0","30034.0","17495.0","25825.0","23235.0","20526.0",
            "12873.0","21686.0","24709.0","25846.0","32082.0","19560.0","26719.0","18777.0","7996.0",">32485.0","29426.0","24305.0","21846.0",
            "23945.0","21657.0","25406.0","23025.0","24511.0","25225.0","17914.0","19843.0","24706.0","18450.0","22279.0","13769.0","22013.0",
            "21477.0","<6570.0","26247.0","23267.0","25199.0","17112.0","31005.0","23667.0","31420.0","26845.0","24904.0","15040.0","25611.0",
            "25017.0","14263.0","22504.0","24721.0","25565.0","28169.0","26427.0","25611.0","25847.0","23696.0","29716.0","27579.0","21461.0",
            "22068.0","24770.0","28967.0","23250.0","16449.0","18861.0","20128.0","21325.0","22184.0","23149.0","17824.0","20979.0","29378.0",
            "18391.0","23439.0","21328.0","<6570.0","25384.0","26367.0","29021.0","21594.0","18820.0","27295.0","26249.0","26114.0","28002.0",
            "23897.0","23328.0","28254.0","25724.0","23916.0","18359.0","22835.0","22542.0","27070.0","19481.0","29256.0","28102.0","25490.0",
            "28398.0","18956.0","25194.0","16696.0","22980.0","24545.0","25902.0","26109.0","29515.0","14913.0","28424.0","28605.0","16032.0",
            "19904.0","23743.0","22746.0","24784.0","22553.0","18258.0","<6570.0","28742.0","22768.0","27165.0","20843.0","18681.0","27266.0",
            "20242.0","22755.0","24670.0","21855.0","18337.0","16406.0","25616.0","21533.0","19252.0","26687.0","23866.0","24171.0","19421.0",
            "16188.0","24918.0","19701.0","26537.0","19468.0","25982.0","16533.0","30732.0","20378.0","17068.0","23774.0","17836.0","25671.0",
            "25171.0",">32485.0","28743.0","21715.0","10262.0","21629.0","19514.0","22744.0","21809.0","17726.0","13429.0","23670.0","17849.0",
            "31656.0","26519.0","21302.0","22221.0","25532.0","20554.0","25526.0","26438.0","17007.0","28105.0","23624.0","28299.0","25970.0",
            "25049.0","16754.0","21539.0","31633.0"
        });

        mockData.put("crc_msk_2018_MSI_SCORE", new String[]{
            "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0",
            "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.0", "0.06",
            "0.07", "0.07", "0.07", "0.07", "0.07", "0.07", "0.07", "0.07", "0.07", "0.07", "0.07", "0.07", "0.07",
            "0.07", "0.07", "0.07", "0.07", "0.07", "0.07", "0.07", "0.07", "0.08", "0.08", "0.08", "0.08", "0.08",
            "0.08", "0.08", "0.08", "0.08", "0.08", "0.08", "0.08", "0.08", "0.08", "0.08", "0.08", "0.08", "0.08",
            "0.08", "0.08", "0.08", "0.08", "0.08", "0.08", "0.08", "0.08", "0.08", "0.08", "0.08", "0.08", "0.08",
            "0.08", "0.08", "0.08", "0.08", "0.08", "0.08", "0.08", "0.08", "0.08", "0.08", "0.09", "0.09", "0.09",
            "0.09", "0.09", "0.09", "0.09", "0.09", "0.09", "0.09", "0.09", "0.09", "0.09", "0.09", "0.09", "0.09",
            "0.09", "0.09", "0.09", "0.09", "0.09", "0.09", "0.09", "0.09", "0.09", "0.09", "0.09", "0.09", "0.1", "0.1",
            "0.1", "0.1", "0.1", "0.1", "0.1", "0.11", "0.11", "0.11", "0.12", "0.12", "0.12", "0.13", "0.13", "0.14",
            "0.14", "0.14", "0.14", "0.14", "0.14", "0.14", "0.15", "0.15", "0.15", "0.15", "0.15", "0.15", "0.15",
            "0.15", "0.15", "0.15", "0.15", "0.15", "0.15", "0.15", "0.15", "0.15", "0.15", "0.15", "0.15", "0.15",
            "0.15", "0.16", "0.16", "0.16", "0.16", "0.16", "0.16", "0.16", "0.16", "0.16", "0.16", "0.16", "0.16",
            "0.16", "0.16", "0.16", "0.16", "0.17", "0.17", "0.17", "0.17", "0.17", "0.17", "0.17", "0.17", "0.17",
            "0.17", "0.17", "0.17", "0.17", "0.17", "0.17", "0.17", "0.18", "0.18", "0.18", "0.18", "0.18", "0.18",
            "0.18", "0.18", "0.18", "0.18", "0.18", "0.19", "0.19", "0.19", "0.19", "0.19", "0.19", "0.19", "0.19",
            "0.2", "0.2", "0.2", "0.2", "0.21", "0.21", "0.22", "0.22", "0.22", "0.22", "0.22", "0.22", "0.22", "0.22",
            "0.23", "0.23", "0.23", "0.23", "0.24", "0.24", "0.24", "0.24", "0.24", "0.24", "0.24", "0.24", "0.24",
            "0.24", "0.25", "0.25", "0.25", "0.25", "0.25", "0.25", "0.25", "0.26", "0.26", "0.26", "0.26", "0.26",
            "0.26", "0.26", "0.26", "0.26", "0.26", "0.27", "0.27", "0.27", "0.27", "0.27", "0.27", "0.27", "0.27",
            "0.27", "0.28", "0.28", "0.28", "0.28", "0.28", "0.28", "0.29", "0.29", "0.29", "0.3", "0.3", "0.3", "0.3",
            "0.3", "0.3", "0.3", "0.31", "0.31", "0.31", "0.31", "0.31", "0.31", "0.31", "0.32", "0.32", "0.32", "0.32",
            "0.32", "0.33", "0.33", "0.33", "0.33", "0.33", "0.33", "0.33", "0.33", "0.33", "0.34", "0.34", "0.34",
            "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.35", "0.35", "0.35", "0.35", "0.35", "0.35",
            "0.35", "0.35", "0.35", "0.36", "0.36", "0.36", "0.36", "0.36", "0.36", "0.37", "0.37", "0.37", "0.38",
            "0.38", "0.38", "0.38", "0.38", "0.38", "0.38", "0.39", "0.39", "0.39", "0.39", "0.39", "0.39", "0.39",
            "0.39", "0.39", "0.4", "0.4", "0.41", "0.41", "0.41", "0.41", "0.41", "0.42", "0.42", "0.42", "0.42",
            "0.42", "0.42", "0.42", "0.42", "0.42", "0.43", "0.43", "0.43", "0.43", "0.44", "0.44", "0.44", "0.44",
            "0.44", "0.45", "0.45", "0.45", "0.45", "0.45", "0.45", "0.45", "0.46", "0.46", "0.47", "0.47", "0.47",
            "0.47", "0.47", "0.47", "0.47", "0.48", "0.48", "0.48", "0.49", "0.49", "0.49", "0.49", "0.49", "0.49",
            "0.49", "0.49", "0.5", "0.5", "0.5", "0.5", "0.5", "0.5", "0.5", "0.51", "0.51", "0.52", "0.52", "0.52",
            "0.52", "0.52", "0.53", "0.53", "0.53", "0.53", "0.53", "0.54", "0.54", "0.54", "0.54", "0.54", "0.55",
            "0.55", "0.55", "0.55", "0.55", "0.55", "0.55", "0.56", "0.57", "0.57", "0.57", "0.57", "0.57", "0.57",
            "0.57", "0.58", "0.58", "0.58", "0.58", "0.58", "0.59", "0.59", "0.59", "0.59", "0.59", "0.59", "0.59",
            "0.59", "0.6", "0.6", "0.6", "0.6", "0.6", "0.61", "0.61", "0.61", "0.61", "0.62", "0.62", "0.62", "0.62",
            "0.63", "0.63", "0.63", "0.63", "0.64", "0.64", "0.64", "0.65", "0.65", "0.65", "0.65", "0.65", "0.65",
            "0.65", "0.66", "0.66", "0.66", "0.67", "0.67", "0.67", "0.67", "0.67", "0.67", "0.67", "0.68", "0.68",
            "0.68", "0.68", "0.69", "0.69", "0.69", "0.69", "0.7", "0.7", "0.7", "0.7", "0.71", "0.71", "0.72", "0.72",
            "0.72", "0.72", "0.72", "0.73", "0.73", "0.73", "0.74", "0.74", "0.74", "0.75", "0.75", "0.75", "0.76",
            "0.76", "0.76", "0.76", "0.76", "0.77", "0.77", "0.77", "0.77", "0.77", "0.78", "0.78", "0.78", "0.78",
            "0.79", "0.79", "0.79", "0.8", "0.81", "0.81", "0.82", "0.82", "0.82", "0.83", "0.83", "0.83", "0.83",
            "0.83", "0.84", "0.84", "0.84", "0.84", "0.84", "0.84", "0.85", "0.85", "0.85", "0.85", "0.85", "0.85",
            "0.86", "0.86", "0.86", "0.86", "0.87", "0.87", "0.87", "0.88", "0.88", "0.88", "0.88", "0.88", "0.89",
            "0.89", "0.89", "0.89", "0.89", "0.89", "0.89", "0.89", "0.89", "0.89", "0.9", "0.9", "0.9", "0.91", "0.91",
            "0.92", "0.92", "0.92", "0.93", "0.93", "0.93", "0.94", "0.94", "0.96", "0.97", "0.97", "0.97", "0.97",
            "0.98", "0.98", "0.98", "0.98", "0.99", "1.0", "1.0", "1.01", "1.02", "1.02", "1.02", "1.02", "1.03", "1.03",
            "1.03", "1.03", "1.03", "1.04", "1.04", "1.04", "1.04", "1.04", "1.05", "1.06", "1.06", "1.07", "1.07",
            "1.08", "1.08", "1.08", "1.09", "1.09", "1.09", "1.09", "1.1", "1.1", "1.1", "1.1", "1.1", "1.1", "1.11",
            "1.11", "1.11", "1.12", "1.13", "1.13", "1.13", "1.14", "1.14", "1.15", "1.15", "1.15", "1.15", "1.16",
            "1.16", "1.16", "1.16", "1.17", "1.17", "1.17", "1.17", "1.18", "1.19", "1.19", "1.19", "1.2", "1.21",
            "1.21", "1.22", "1.22", "1.22", "1.23", "1.23", "1.24", "1.24", "1.24", "1.24", "1.24", "1.25", "1.25",
            "1.25", "1.25", "1.26", "1.26", "1.26", "1.26", "1.27", "1.27", "1.28", "1.29", "1.3", "1.3", "1.3", "1.3",
            "1.31", "1.32", "1.32", "1.32", "1.33", "1.33", "1.34", "1.34", "1.34", "1.35", "1.35", "1.35", "1.35",
            "1.36", "1.36", "1.37", "1.37", "1.37", "1.38", "1.38", "1.38", "1.39", "1.39", "1.39", "1.4", "1.41",
            "1.41", "1.41", "1.41", "1.42", "1.43", "1.43", "1.44", "1.44", "1.44", "1.45", "1.45", "1.45", "1.47",
            "1.47", "1.48", "1.48", "1.48", "1.48", "1.49", "1.5", "1.51", "1.51", "1.51", "1.52", "1.52", "1.53",
            "1.53", "1.54", "1.55", "1.55", "1.56", "1.57", "1.57", "1.58", "1.59", "1.59", "1.6", "1.6", "1.6",
            "1.6", "1.61", "1.61", "1.63", "1.63", "1.63", "1.64", "1.65", "1.66", "1.67", "1.67", "1.68", "1.69",
            "1.7", "1.7", "1.74", "1.75", "1.77", "1.77", "1.78", "1.8", "1.81", "1.81", "1.82", "1.83", "1.83", "1.84",
            "1.84", "1.84", "1.86", "1.86", "1.86", "1.86", "1.87", "1.87", "1.88", "1.89", "1.9", "1.91", "1.93",
            "1.93", "1.93", "1.93", "1.94", "1.95", "1.95", "1.95", "1.97", "1.97", "1.98", "1.99", "2.01", "2.02",
            "2.03", "2.03", "2.03", "2.04", "2.07", "2.07", "2.07", "2.07", "2.07", "2.09", "2.13", "2.14", "2.16",
            "2.18", "2.2", "2.24", "2.24", "2.26", "2.27", "2.27", "2.28", "2.31", "2.32", "2.33", "2.34", "2.37",
            "2.37", "2.39", "2.4", "2.41", "2.43", "2.46", "2.51", "2.52", "2.58", "2.58", "2.59", "2.64", "2.65",
            "2.68", "2.72", "2.72", "2.73", "2.74", "2.77", "2.78", "2.8", "2.82", "2.82", "2.84", "2.87", "2.88",
            "2.89", "2.9", "2.9", "2.99", "3.0", "3.0", "3.01", "3.02", "3.04", "3.1", "3.13", "3.16", "3.2", "3.21",
            "3.28", "3.31", "3.31", "3.35", "3.39", "3.39", "3.47", "3.48", "3.55", "3.68", "3.71", "3.75", "3.77",
            "3.77", "3.83", "3.87", "3.88", "4.06", "4.08", "4.25", "4.27", "4.5", "4.5", "4.57", "4.8", "5.04",
            "5.06", "5.13", "5.31", "5.59", "6.17", "6.38", "6.92", "6.96", "7.36", "8.65", "9.41", "10.15", "12.1",
            "14.14", "14.48", "14.76", "16.21", "16.27", "16.51", "17.18", "17.95", "18.87", "20.39", "21.32", "22.23",
            "22.62", "23.53", "23.54", "23.55", "23.97", "24.85", "25.44", "26.19", "26.2", "27.12", "27.25", "27.79",
            "28.04", "28.31", "28.39", "28.41", "28.56", "28.68", "29.17", "29.27", "29.31", "29.42", "29.5", "29.81",
            "29.95", "30.36", "30.43", "30.6", "30.74", "31.2", "31.6", "32.04", "32.87", "33.2", "33.33", "33.36",
            "33.56", "33.75", "33.91", "34.14", "34.3", "34.33", "34.6", "34.94", "35.09", "35.18", "35.78", "36.15",
            "36.28", "36.42", "37.38", "37.46", "37.83", "37.92", "37.98", "38.06", "38.36", "38.44", "38.64", "38.82",
            "39.17", "39.6", "39.84", "40.65", "41.71", "41.9", "41.93", "41.97", "42.0", "42.22", "42.76", "42.85",
            "43.5", "44.05", "44.08", "45.03", "45.45", "45.94", "46.23", "47.19", "47.7", "48.45", "NA", "NA", "NA",
            "NA", "NA","NA","NA","NA"
        });

        mockData.put("impact_DNA_INPUT", new String[] {
            "50.0", "50.0", "50.0", "51.0", "51.0", "52.0", "53.0", "54.0", "55.0", "55.0", "60.0", "62.0", "63.0", "75.0", "75.0", "75.0", "76.0", "77.0",
            "78.0", "78.0", "79.0", "80.0", "82.0", "88.0", "89.0", "90.0", "91.0", "92.0", "93.0", "96.0", "98.0", "100.0", "102.0", "102.0", "104.0",
            "107.0", "108.0", "110.0", "111.0", "111.0", "111.0", "112.0", "116.0", "118.0", "120.0", "121.0", "122.0", "123.0", "125.0", "130.0",
            "131.0", "132.0", "135.0", "136.0", "136.0", "140.0", "144.0", "145.0", "150.0", "151.0", "152.0", "156.0", "157.0", "158.0", "159.0",
            "161.0", "162.0", "165.0", "166.0", "166.0", "170.0", "174.0", "175.0", "180.0", "181.0", "152.0", "156.0", "157.0", "158.0", "159.0",
            "191.0", "192.0", "195.0", "196.0", "166.0", "200.0", "204.0", "205.0", "210.0", "211.0", "212.0", "216.0", "217.0", "218.0", "219.0",
            "221.0", "222.0", "225.0", "226.0", "226.0", "230.0", "234.0", "235.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0",
            "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0", "240.0"
        });

        mockData.put("recursively_always_zero_IQR", new String[] {
            "11.0",
            "22.0", "22.0", "22.0", "22.0",
            "33.0", "33.0", "33.0", "33.0", "33.0", "33.0", "33.0", "33.0", "33.0", "33.0", "33.0", "33.0", "33.0", "33.0", "33.0", "33.0", "33.0", "33.0", "33.0",
            "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0",
            "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0",
            "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0",
            "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0",
            "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0", "44.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0", "55.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0",
            "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0", "66.0"
        });

        mockData.put("linear_integer_continue", new String[]{
            "1.0", "2.0", "3.0", "4.0", "5.0", "6.0", "7.0", "8.0", "9.0", "10.0", "11.0", "12.0", "13.0", "14.0", "15.0", "16.0", "17.0", "18.0", "19.0", "20.0", "21.0", "22.0", "23.0", "24.0", "25.0", "26.0", "27.0", "28.0", "29.0", "30.0", "31.0", "32.0", "33.0", "34.0", "35.0", "36.0", "37.0", "38.0", "39.0", "40.0", "41.0", "42.0", "43.0", "44.0", "45.0", "46.0", "47.0", "48.0", "49.0", "50.0", "51.0", "52.0", "53.0", "54.0", "55.0", "56.0", "57.0", "58.0", "59.0", "60.0", "61.0", "62.0", "63.0", "64.0", "65.0", "66.0", "67.0", "68.0", "69.0", "70.0", "71.0", "72.0", "73.0", "74.0", "75.0", "76.0", "77.0", "78.0", "79.0", "80.0", "81.0", "82.0", "83.0", "84.0", "85.0", "86.0", "87.0", "88.0", "89.0", "90.0", "91.0", "92.0", "93.0", "94.0", "95.0", "96.0", "97.0", "98.0", "99.0", "100.0"
        });
        
        return mockData;
    }
    
    @Test
    public void testLinearDataBinner()
    {
        String studyId = "blca_tcga";
        String attributeId = "AGE";
        String[] values = mockData.get("blca_tcga_AGE");
        ClinicalDataBinFilter clinicalDataBinFilter = new ClinicalDataBinFilter();
        clinicalDataBinFilter.setAttributeId(attributeId);
        clinicalDataBinFilter.setClinicalDataType(ClinicalDataType.PATIENT);

        List<ClinicalData> clinicalData = mockClinicalData(attributeId, studyId, values);
        List<String> patientIds = clinicalData.stream().map(ClinicalData::getPatientId).collect(Collectors.toList());
        
        List<DataBin> dataBins = dataBinner.calculateClinicalDataBins(clinicalDataBinFilter, clinicalData, patientIds);

        Assert.assertEquals(11, dataBins.size());
        
        Assert.assertEquals("<=", dataBins.get(0).getSpecialValue());
        Assert.assertEquals(new BigDecimal("40.0"), dataBins.get(0).getEnd());
        Assert.assertEquals(2, dataBins.get(0).getCount().intValue());

        Assert.assertEquals(new BigDecimal("40.0"), dataBins.get(1).getStart());
        Assert.assertEquals(new BigDecimal("45.0"), dataBins.get(1).getEnd());
        Assert.assertEquals(6, dataBins.get(1).getCount().intValue());

        Assert.assertEquals(new BigDecimal("45.0"), dataBins.get(2).getStart());
        Assert.assertEquals(new BigDecimal("50.0"), dataBins.get(2).getEnd());
        Assert.assertEquals(17, dataBins.get(2).getCount().intValue());

        Assert.assertEquals(new BigDecimal("50.0"), dataBins.get(3).getStart());
        Assert.assertEquals(new BigDecimal("55.0"), dataBins.get(3).getEnd());
        Assert.assertEquals(24, dataBins.get(3).getCount().intValue());

        Assert.assertEquals(new BigDecimal("55.0"), dataBins.get(4).getStart());
        Assert.assertEquals(new BigDecimal("60.0"), dataBins.get(4).getEnd());
        Assert.assertEquals(59, dataBins.get(4).getCount().intValue());

        Assert.assertEquals(new BigDecimal("60.0"), dataBins.get(5).getStart());
        Assert.assertEquals(new BigDecimal("65.0"), dataBins.get(5).getEnd());
        Assert.assertEquals(53, dataBins.get(5).getCount().intValue());

        Assert.assertEquals(new BigDecimal("65.0"), dataBins.get(6).getStart());
        Assert.assertEquals(new BigDecimal("70.0"), dataBins.get(6).getEnd());
        Assert.assertEquals(71, dataBins.get(6).getCount().intValue());

        Assert.assertEquals(new BigDecimal("70.0"), dataBins.get(7).getStart());
        Assert.assertEquals(new BigDecimal("75.0"), dataBins.get(7).getEnd());
        Assert.assertEquals(67, dataBins.get(7).getCount().intValue());

        Assert.assertEquals(new BigDecimal("75.0"), dataBins.get(8).getStart());
        Assert.assertEquals(new BigDecimal("80.0"), dataBins.get(8).getEnd());
        Assert.assertEquals(64, dataBins.get(8).getCount().intValue());

        Assert.assertEquals(new BigDecimal("80.0"), dataBins.get(9).getStart());
        Assert.assertEquals(new BigDecimal("85.0"), dataBins.get(9).getEnd());
        Assert.assertEquals(35, dataBins.get(9).getCount().intValue());

        Assert.assertEquals(new BigDecimal("85.0"), dataBins.get(10).getStart());
        Assert.assertEquals(new BigDecimal("90.0"), dataBins.get(10).getEnd());
        Assert.assertEquals(13, dataBins.get(10).getCount().intValue());
    }


    @Test
    public void testLinearDataBinnerWithRange()
    {
        String studyId = "random";
        String attributeId = "random";
        String[] values = mockData.get("linear_integer_continue");
        ClinicalDataBinFilter clinicalDataBinFilter = new ClinicalDataBinFilter();
        clinicalDataBinFilter.setAttributeId(attributeId);
        clinicalDataBinFilter.setStart(new BigDecimal("39.5"));
        clinicalDataBinFilter.setEnd(new BigDecimal("80.5"));

        List<ClinicalData> clinicalData = mockClinicalData(attributeId, studyId, values);
        List<String> patientIds = clinicalData.stream().map(ClinicalData::getPatientId).collect(Collectors.toList());

        List<DataBin> dataBins = dataBinner.calculateClinicalDataBins(clinicalDataBinFilter, clinicalData, patientIds);

        Assert.assertEquals(8, dataBins.size());

        Assert.assertEquals("<=", dataBins.get(0).getSpecialValue());
        Assert.assertEquals(new BigDecimal("45.0"), dataBins.get(0).getEnd());
        Assert.assertEquals(6, dataBins.get(0).getCount().intValue());

        Assert.assertEquals(new BigDecimal("45.0"), dataBins.get(1).getStart());
        Assert.assertEquals(new BigDecimal("50.0"), dataBins.get(1).getEnd());
        Assert.assertEquals(5, dataBins.get(1).getCount().intValue());

        Assert.assertEquals(new BigDecimal("50.0"), dataBins.get(2).getStart());
        Assert.assertEquals(new BigDecimal("55.0"), dataBins.get(2).getEnd());
        Assert.assertEquals(5, dataBins.get(2).getCount().intValue());

        Assert.assertEquals(new BigDecimal("75.0"), dataBins.get(7).getStart());
        Assert.assertEquals(new BigDecimal("80.0"), dataBins.get(7).getEnd());
        Assert.assertEquals(5, dataBins.get(7).getCount().intValue());
    }


    @Test
    public void testLinearDataBinnerWithRangeOne()
    {
        String studyId = "random";
        String attributeId = "random";
        String[] values = mockData.get("linear_integer_continue");
        ClinicalDataBinFilter clinicalDataBinFilter = new ClinicalDataBinFilter();
        clinicalDataBinFilter.setAttributeId(attributeId);
        clinicalDataBinFilter.setStart(new BigDecimal("39.5"));
        clinicalDataBinFilter.setEnd(new BigDecimal("80.5"));

        List<ClinicalData> clinicalData = mockClinicalData(attributeId, studyId, values);
        List<String> patientIds = clinicalData.stream().map(ClinicalData::getPatientId).collect(Collectors.toList());

        List<DataBin> dataBins = dataBinner.calculateClinicalDataBins(clinicalDataBinFilter, clinicalData, patientIds);

        Assert.assertEquals(8, dataBins.size());

        Assert.assertEquals("<=", dataBins.get(0).getSpecialValue());
        Assert.assertEquals(new BigDecimal("45.0"), dataBins.get(0).getEnd());
        Assert.assertEquals(6, dataBins.get(0).getCount().intValue());

        Assert.assertEquals(new BigDecimal("45.0"), dataBins.get(1).getStart());
        Assert.assertEquals(new BigDecimal("50.0"), dataBins.get(1).getEnd());
        Assert.assertEquals(5, dataBins.get(1).getCount().intValue());

        Assert.assertEquals(new BigDecimal("50.0"), dataBins.get(2).getStart());
        Assert.assertEquals(new BigDecimal("55.0"), dataBins.get(2).getEnd());
        Assert.assertEquals(5, dataBins.get(2).getCount().intValue());

        Assert.assertEquals(new BigDecimal("75.0"), dataBins.get(7).getStart());
        Assert.assertEquals(new BigDecimal("80.0"), dataBins.get(7).getEnd());
        Assert.assertEquals(5, dataBins.get(7).getCount().intValue());
    }

    @Test
    public void testLinearDataBinnerWithRangeTwo()
    {
        String studyId = "random";
        String attributeId = "random";
        String[] values = mockData.get("linear_integer_continue");
        ClinicalDataBinFilter clinicalDataBinFilter = new ClinicalDataBinFilter();
        clinicalDataBinFilter.setAttributeId(attributeId);
        clinicalDataBinFilter.setStart(new BigDecimal("39.5"));
        clinicalDataBinFilter.setEnd(new BigDecimal("81.5"));

        List<ClinicalData> clinicalData = mockClinicalData(attributeId, studyId, values);
        List<String> patientIds = clinicalData.stream().map(ClinicalData::getPatientId).collect(Collectors.toList());

        List<DataBin> dataBins = dataBinner.calculateClinicalDataBins(clinicalDataBinFilter, clinicalData, patientIds);

        Assert.assertEquals(9, dataBins.size());

        Assert.assertEquals("<=", dataBins.get(0).getSpecialValue());
        Assert.assertEquals(new BigDecimal("45.0"), dataBins.get(0).getEnd());
        Assert.assertEquals(6, dataBins.get(0).getCount().intValue());

        Assert.assertEquals(new BigDecimal("45.0"), dataBins.get(1).getStart());
        Assert.assertEquals(new BigDecimal("50.0"), dataBins.get(1).getEnd());
        Assert.assertEquals(5, dataBins.get(1).getCount().intValue());

        Assert.assertEquals(new BigDecimal("50.0"), dataBins.get(2).getStart());
        Assert.assertEquals(new BigDecimal("55.0"), dataBins.get(2).getEnd());
        Assert.assertEquals(5, dataBins.get(2).getCount().intValue());

        Assert.assertEquals(new BigDecimal("75.0"), dataBins.get(7).getStart());
        Assert.assertEquals(new BigDecimal("80.0"), dataBins.get(7).getEnd());
        Assert.assertEquals(5, dataBins.get(7).getCount().intValue());
        
        Assert.assertEquals(new BigDecimal("80.0"), dataBins.get(8).getStart());
        Assert.assertEquals(">", dataBins.get(8).getSpecialValue());
        Assert.assertEquals(1, dataBins.get(8).getCount().intValue());
    }

    @Test
    public void testLinearDataBinnerWithRangeAndCustomrBins()
    {
        String studyId = "random";
        String attributeId = "random";
        String[] values = mockData.get("linear_integer_continue");
        ClinicalDataBinFilter clinicalDataBinFilter = new ClinicalDataBinFilter();
        clinicalDataBinFilter.setAttributeId(attributeId);
        clinicalDataBinFilter.setStart(new BigDecimal("39.5"));
        clinicalDataBinFilter.setEnd(new BigDecimal("81.5"));
        clinicalDataBinFilter.setCustomBins(Arrays.asList(50.0, 60.0, 70.0).stream().map(item -> BigDecimal.valueOf(item)).collect(Collectors.toList()));

        List<ClinicalData> clinicalData = mockClinicalData(attributeId, studyId, values);
        List<String> patientIds = clinicalData.stream().map(ClinicalData::getPatientId).collect(Collectors.toList());

        List<DataBin> dataBins = dataBinner.calculateClinicalDataBins(clinicalDataBinFilter, clinicalData, patientIds);

        Assert.assertEquals(4, dataBins.size());

        Assert.assertEquals("<=", dataBins.get(0).getSpecialValue());
        Assert.assertEquals(new BigDecimal("50.0"), dataBins.get(0).getEnd());
        Assert.assertEquals(11, dataBins.get(0).getCount().intValue());

        Assert.assertEquals(new BigDecimal("50.0"), dataBins.get(1).getStart());
        Assert.assertEquals(new BigDecimal("60.0"), dataBins.get(1).getEnd());
        Assert.assertEquals(10, dataBins.get(1).getCount().intValue());

        Assert.assertEquals(new BigDecimal("60.0"), dataBins.get(2).getStart());
        Assert.assertEquals(new BigDecimal("70.0"), dataBins.get(2).getEnd());
        Assert.assertEquals(10, dataBins.get(2).getCount().intValue());

        Assert.assertEquals(new BigDecimal("70.0"), dataBins.get(3).getStart());
        Assert.assertEquals(">", dataBins.get(3).getSpecialValue());
        Assert.assertEquals(11, dataBins.get(3).getCount().intValue());
    }

    @Test
    public void testStaticDataBinnerFilter()
    {
        String studyId = "blca_tcga";
        String attributeId = "AGE";
        String[] values = mockData.get("blca_tcga_AGE");
        
        ClinicalDataBinFilter clinicalDataBinFilter = new ClinicalDataBinFilter();
        clinicalDataBinFilter.setAttributeId(attributeId);
        clinicalDataBinFilter.setClinicalDataType(ClinicalDataType.PATIENT);

        List<ClinicalData> unfilteredClinicalData = mockClinicalData(attributeId, studyId, values);
        List<String> unfilteredPatientIds = 
            unfilteredClinicalData.stream().map(ClinicalData::getPatientId).collect(Collectors.toList());
        List<DataBin> unfilteredDataBins = dataBinner.calculateClinicalDataBins(
            clinicalDataBinFilter, unfilteredClinicalData, unfilteredPatientIds);
        
        List<ClinicalData> filteredClinicalData = unfilteredClinicalData.subList(0, 108); // (0, 60] interval
        List<String> filteredPatientIds =
            filteredClinicalData.stream().map(ClinicalData::getPatientId).collect(Collectors.toList());
        List<DataBin> filteredDataBins = dataBinner.calculateClinicalDataBins(
            clinicalDataBinFilter, filteredClinicalData, unfilteredClinicalData, filteredPatientIds, unfilteredPatientIds);
        
        // same number of bins for both
        Assert.assertEquals(11, unfilteredDataBins.size());
        Assert.assertEquals(11, filteredDataBins.size());

        // same start/end/special values for all bins
        
        Assert.assertEquals("<=", filteredDataBins.get(0).getSpecialValue());
        Assert.assertEquals("<=", unfilteredDataBins.get(0).getSpecialValue());
        Assert.assertEquals(new BigDecimal("40.0"), filteredDataBins.get(0).getEnd());
        Assert.assertEquals(new BigDecimal("40.0"), unfilteredDataBins.get(0).getEnd());

        Assert.assertEquals(new BigDecimal("40.0"), filteredDataBins.get(1).getStart());
        Assert.assertEquals(new BigDecimal("40.0"), unfilteredDataBins.get(1).getStart());
        Assert.assertEquals(new BigDecimal("45.0"), filteredDataBins.get(1).getEnd());
        Assert.assertEquals(new BigDecimal("45.0"), unfilteredDataBins.get(1).getEnd());

        Assert.assertEquals(new BigDecimal("45.0"), filteredDataBins.get(2).getStart());
        Assert.assertEquals(new BigDecimal("45.0"), unfilteredDataBins.get(2).getStart());
        Assert.assertEquals(new BigDecimal("50.0"), filteredDataBins.get(2).getEnd());
        Assert.assertEquals(new BigDecimal("50.0"), unfilteredDataBins.get(2).getEnd());

        Assert.assertEquals(new BigDecimal("50.0"), filteredDataBins.get(3).getStart());
        Assert.assertEquals(new BigDecimal("50.0"), unfilteredDataBins.get(3).getStart());
        Assert.assertEquals(new BigDecimal("55.0"), filteredDataBins.get(3).getEnd());
        Assert.assertEquals(new BigDecimal("55.0"), unfilteredDataBins.get(3).getEnd());

        Assert.assertEquals(new BigDecimal("55.0"), filteredDataBins.get(4).getStart());
        Assert.assertEquals(new BigDecimal("55.0"), unfilteredDataBins.get(4).getStart());
        Assert.assertEquals(new BigDecimal("60.0"), filteredDataBins.get(4).getEnd());
        Assert.assertEquals(new BigDecimal("60.0"), unfilteredDataBins.get(4).getEnd());

        Assert.assertEquals(new BigDecimal("60.0"), filteredDataBins.get(5).getStart());
        Assert.assertEquals(new BigDecimal("60.0"), unfilteredDataBins.get(5).getStart());
        Assert.assertEquals(new BigDecimal("65.0"), filteredDataBins.get(5).getEnd());
        Assert.assertEquals(new BigDecimal("65.0"), unfilteredDataBins.get(5).getEnd());

        Assert.assertEquals(new BigDecimal("85.0"), filteredDataBins.get(10).getStart());
        Assert.assertEquals(new BigDecimal("85.0"), unfilteredDataBins.get(10).getStart());
        Assert.assertEquals(new BigDecimal("90.0"), filteredDataBins.get(10).getEnd());
        Assert.assertEquals(new BigDecimal("90.0"), unfilteredDataBins.get(10).getEnd());
        
        // same counts until the bin (60-65]
        
        Assert.assertEquals(2, filteredDataBins.get(0).getCount().intValue());
        Assert.assertEquals(2, unfilteredDataBins.get(0).getCount().intValue());

        Assert.assertEquals(6, filteredDataBins.get(1).getCount().intValue());
        Assert.assertEquals(6, unfilteredDataBins.get(1).getCount().intValue());

        Assert.assertEquals(17, filteredDataBins.get(2).getCount().intValue());
        Assert.assertEquals(17, unfilteredDataBins.get(2).getCount().intValue());

        Assert.assertEquals(24, filteredDataBins.get(3).getCount().intValue());
        Assert.assertEquals(24, unfilteredDataBins.get(3).getCount().intValue());

        Assert.assertEquals(59, filteredDataBins.get(4).getCount().intValue());
        Assert.assertEquals(59, unfilteredDataBins.get(4).getCount().intValue());

        Assert.assertEquals(0, filteredDataBins.get(5).getCount().intValue());
        Assert.assertEquals(53, unfilteredDataBins.get(5).getCount().intValue());

        Assert.assertEquals(0, filteredDataBins.get(6).getCount().intValue());
        Assert.assertEquals(71, unfilteredDataBins.get(6).getCount().intValue());

        Assert.assertEquals(0, filteredDataBins.get(10).getCount().intValue());
        Assert.assertEquals(13, unfilteredDataBins.get(10).getCount().intValue());
    }

    @Test
    public void testLinearDataBinnerWithPediatricAge()
    {
        String studyId = "skcm_broad";
        String attributeId = "AGE_AT_PROCUREMENT";
        String[] values = mockData.get("skcm_broad_AGE_AT_PROCUREMENT");
        String[] patientsWithNoClinicalData = {
            "NA_PATIENT_01", "NA_PATIENT_02", "NA_PATIENT_03", "NA_PATIENT_04"
        };
        ClinicalDataBinFilter clinicalDataBinFilter = new ClinicalDataBinFilter();
        clinicalDataBinFilter.setAttributeId(attributeId);
        clinicalDataBinFilter.setClinicalDataType(ClinicalDataType.PATIENT);
        clinicalDataBinFilter.setCustomBins(Arrays.asList(18.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0).stream().map(item -> BigDecimal.valueOf(item)).collect(Collectors.toList()));

        List<ClinicalData> clinicalData = mockClinicalData(attributeId, studyId, values);
        List<String> patientIds = clinicalData.stream().map(ClinicalData::getPatientId).collect(Collectors.toList());
        patientIds.addAll(Arrays.asList(patientsWithNoClinicalData));

        List<DataBin> dataBins = dataBinner.calculateClinicalDataBins(clinicalDataBinFilter, clinicalData, patientIds);

        Assert.assertEquals(10, dataBins.size());

        Assert.assertEquals("<=", dataBins.get(0).getSpecialValue());
        Assert.assertEquals(new BigDecimal("18.0"), dataBins.get(0).getEnd());
        Assert.assertEquals(1, dataBins.get(0).getCount().intValue());

        Assert.assertEquals(new BigDecimal("18.0"), dataBins.get(1).getStart());
        Assert.assertEquals(new BigDecimal("20.0"), dataBins.get(1).getEnd());
        Assert.assertEquals(0, dataBins.get(1).getCount().intValue());

        Assert.assertEquals(new BigDecimal("20.0"), dataBins.get(2).getStart());
        Assert.assertEquals(new BigDecimal("30.0"), dataBins.get(2).getEnd());
        Assert.assertEquals(9, dataBins.get(2).getCount().intValue());

        Assert.assertEquals(new BigDecimal("30.0"), dataBins.get(3).getStart());
        Assert.assertEquals(new BigDecimal("40.0"), dataBins.get(3).getEnd());
        Assert.assertEquals(16, dataBins.get(3).getCount().intValue());

        Assert.assertEquals(new BigDecimal("40.0"), dataBins.get(4).getStart());
        Assert.assertEquals(new BigDecimal("50.0"), dataBins.get(4).getEnd());
        Assert.assertEquals(31, dataBins.get(4).getCount().intValue());

        Assert.assertEquals(new BigDecimal("50.0"), dataBins.get(5).getStart());
        Assert.assertEquals(new BigDecimal("60.0"), dataBins.get(5).getEnd());
        Assert.assertEquals(25, dataBins.get(5).getCount().intValue());

        Assert.assertEquals(new BigDecimal("60.0"), dataBins.get(6).getStart());
        Assert.assertEquals(new BigDecimal("70.0"), dataBins.get(6).getEnd());
        Assert.assertEquals(24, dataBins.get(6).getCount().intValue());

        Assert.assertEquals(new BigDecimal("70.0"), dataBins.get(7).getStart());
        Assert.assertEquals(new BigDecimal("80.0"), dataBins.get(7).getEnd());
        Assert.assertEquals(11, dataBins.get(7).getCount().intValue());

        Assert.assertEquals(new BigDecimal("80.0"), dataBins.get(8).getStart());
        Assert.assertEquals(new BigDecimal("90.0"), dataBins.get(8).getEnd());
        Assert.assertEquals(2, dataBins.get(8).getCount().intValue());

        Assert.assertEquals("NA", dataBins.get(9).getSpecialValue());
        Assert.assertEquals(4, dataBins.get(9).getCount().intValue());
    }

    @Test
    public void testLinearDataBinnerWithPediatricAgeCustomBinsTest1()
    {
        String studyId = "skcm_broad";
        String attributeId = "AGE_AT_PROCUREMENT";
        String[] values = mockData.get("skcm_broad_AGE_AT_PROCUREMENT");
        String[] patientsWithNoClinicalData = {
            "NA_PATIENT_01", "NA_PATIENT_02", "NA_PATIENT_03", "NA_PATIENT_04"
        };
        ClinicalDataBinFilter clinicalDataBinFilter = new ClinicalDataBinFilter();
        clinicalDataBinFilter.setAttributeId(attributeId);
        clinicalDataBinFilter.setClinicalDataType(ClinicalDataType.PATIENT);
        clinicalDataBinFilter.setCustomBins(Arrays.asList(18.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0).stream().map(item -> BigDecimal.valueOf(item)).collect(Collectors.toList()));

        List<ClinicalData> clinicalData = mockClinicalData(attributeId, studyId, values);
        List<String> patientIds = clinicalData.stream().map(ClinicalData::getPatientId).collect(Collectors.toList());
        patientIds.addAll(Arrays.asList(patientsWithNoClinicalData));

        List<DataBin> dataBins = dataBinner.calculateClinicalDataBins(clinicalDataBinFilter, clinicalData, patientIds);

        Assert.assertEquals(10, dataBins.size());

        Assert.assertEquals("<=", dataBins.get(0).getSpecialValue());
        Assert.assertEquals(new BigDecimal("18.0"), dataBins.get(0).getEnd());
        Assert.assertEquals(1, dataBins.get(0).getCount().intValue());

        Assert.assertEquals(new BigDecimal("18.0"), dataBins.get(1).getStart());
        Assert.assertEquals(new BigDecimal("20.0"), dataBins.get(1).getEnd());
        Assert.assertEquals(0, dataBins.get(1).getCount().intValue());

        Assert.assertEquals(new BigDecimal("20.0"), dataBins.get(2).getStart());
        Assert.assertEquals(new BigDecimal("30.0"), dataBins.get(2).getEnd());
        Assert.assertEquals(9, dataBins.get(2).getCount().intValue());

        Assert.assertEquals(new BigDecimal("30.0"), dataBins.get(3).getStart());
        Assert.assertEquals(new BigDecimal("40.0"), dataBins.get(3).getEnd());
        Assert.assertEquals(16, dataBins.get(3).getCount().intValue());

        Assert.assertEquals(new BigDecimal("40.0"), dataBins.get(4).getStart());
        Assert.assertEquals(new BigDecimal("50.0"), dataBins.get(4).getEnd());
        Assert.assertEquals(31, dataBins.get(4).getCount().intValue());

        Assert.assertEquals(new BigDecimal("50.0"), dataBins.get(5).getStart());
        Assert.assertEquals(new BigDecimal("60.0"), dataBins.get(5).getEnd());
        Assert.assertEquals(25, dataBins.get(5).getCount().intValue());

        Assert.assertEquals(new BigDecimal("60.0"), dataBins.get(6).getStart());
        Assert.assertEquals(new BigDecimal("70.0"), dataBins.get(6).getEnd());
        Assert.assertEquals(24, dataBins.get(6).getCount().intValue());

        Assert.assertEquals(new BigDecimal("70.0"), dataBins.get(7).getStart());
        Assert.assertEquals(new BigDecimal("80.0"), dataBins.get(7).getEnd());
        Assert.assertEquals(11, dataBins.get(7).getCount().intValue());

        Assert.assertEquals(new BigDecimal("80.0"), dataBins.get(8).getStart());
        Assert.assertEquals(new BigDecimal("90.0"), dataBins.get(8).getEnd());
        Assert.assertEquals(2, dataBins.get(8).getCount().intValue());

        Assert.assertEquals("NA", dataBins.get(9).getSpecialValue());
        Assert.assertEquals(4, dataBins.get(9).getCount().intValue());
    }

    @Test
    public void testLinearDataBinnerWithPediatricAgeCustomBinsTest2()
    {
        String studyId = "skcm_broad";
        String attributeId = "AGE_AT_PROCUREMENT";
        String[] values = mockData.get("skcm_broad_AGE_AT_PROCUREMENT");
        String[] patientsWithNoClinicalData = {
            "NA_PATIENT_01", "NA_PATIENT_02", "NA_PATIENT_03", "NA_PATIENT_04"
        };
        ClinicalDataBinFilter clinicalDataBinFilter = new ClinicalDataBinFilter();
        clinicalDataBinFilter.setAttributeId(attributeId);
        clinicalDataBinFilter.setClinicalDataType(ClinicalDataType.PATIENT);
        clinicalDataBinFilter.setCustomBins(Arrays.asList(18.0, 25.0, 30.0, 35.0).stream().map(item -> BigDecimal.valueOf(item)).collect(Collectors.toList()));

        List<ClinicalData> clinicalData = mockClinicalData(attributeId, studyId, values);
        List<String> patientIds = clinicalData.stream().map(ClinicalData::getPatientId).collect(Collectors.toList());
        patientIds.addAll(Arrays.asList(patientsWithNoClinicalData));

        List<DataBin> dataBins = dataBinner.calculateClinicalDataBins(clinicalDataBinFilter, clinicalData, patientIds);

        Assert.assertEquals(6, dataBins.size());

        Assert.assertEquals("<=", dataBins.get(0).getSpecialValue());
        Assert.assertEquals(new BigDecimal("18.0"), dataBins.get(0).getEnd());
        Assert.assertEquals(1, dataBins.get(0).getCount().intValue());

        Assert.assertEquals(new BigDecimal("18.0"), dataBins.get(1).getStart());
        Assert.assertEquals(new BigDecimal("25.0"), dataBins.get(1).getEnd());
        Assert.assertEquals(2, dataBins.get(1).getCount().intValue());

        Assert.assertEquals(new BigDecimal("25.0"), dataBins.get(2).getStart());
        Assert.assertEquals(new BigDecimal("30.0"), dataBins.get(2).getEnd());
        Assert.assertEquals(7, dataBins.get(2).getCount().intValue());

        Assert.assertEquals(new BigDecimal("30.0"), dataBins.get(3).getStart());
        Assert.assertEquals(new BigDecimal("35.0"), dataBins.get(3).getEnd());
        Assert.assertEquals(7, dataBins.get(3).getCount().intValue());

        Assert.assertEquals(new BigDecimal("35.0"), dataBins.get(4).getStart());
        Assert.assertEquals(">", dataBins.get(4).getSpecialValue());
        Assert.assertEquals(102, dataBins.get(4).getCount().intValue());

        Assert.assertEquals("NA", dataBins.get(5).getSpecialValue());
        Assert.assertEquals(4, dataBins.get(5).getCount().intValue());
    }
    
    @Test
    public void testLinearDataBinnerWithPredefinedAttribute() 
    {
        String studyId = "crc_msk_2018";
        String attributeId = "MSI_SCORE";
        String[] values = mockData.get("crc_msk_2018_MSI_SCORE");
        ClinicalDataBinFilter clinicalDataBinFilter = new ClinicalDataBinFilter();
        clinicalDataBinFilter.setAttributeId(attributeId);
        clinicalDataBinFilter.setClinicalDataType(ClinicalDataType.SAMPLE);
        clinicalDataBinFilter.setCustomBins(Arrays.asList(1.0, 2.0, 5.0, 10.0, 30.0).stream().map(item -> BigDecimal.valueOf(item)).collect(Collectors.toList()));

        List<ClinicalData> clinicalData = mockClinicalData(attributeId, studyId, values);
        List<String> sampleIds = clinicalData.stream().map(ClinicalData::getSampleId).collect(Collectors.toList());

        List<DataBin> dataBins = dataBinner.calculateClinicalDataBins(clinicalDataBinFilter, clinicalData, sampleIds);

        Assert.assertEquals(7, dataBins.size());

        Assert.assertEquals("<=", dataBins.get(0).getSpecialValue());
        Assert.assertEquals(new BigDecimal("1.0"), dataBins.get(0).getEnd());
        Assert.assertEquals(722, dataBins.get(0).getCount().intValue());

        Assert.assertEquals(new BigDecimal("1.0"), dataBins.get(1).getStart());
        Assert.assertEquals(new BigDecimal("2.0"), dataBins.get(1).getEnd());
        Assert.assertEquals(203, dataBins.get(1).getCount().intValue());

        Assert.assertEquals(new BigDecimal("2.0"), dataBins.get(2).getStart());
        Assert.assertEquals(new BigDecimal("5.0"), dataBins.get(2).getEnd());
        Assert.assertEquals(93, dataBins.get(2).getCount().intValue());

        Assert.assertEquals(new BigDecimal("5.0"), dataBins.get(3).getStart());
        Assert.assertEquals(new BigDecimal("10.0"), dataBins.get(3).getEnd());
        Assert.assertEquals(12, dataBins.get(3).getCount().intValue());


        Assert.assertEquals(new BigDecimal("10.0"), dataBins.get(4).getStart());
        Assert.assertEquals(new BigDecimal("30.0"), dataBins.get(4).getEnd());
        Assert.assertEquals(39, dataBins.get(4).getCount().intValue());

        Assert.assertEquals(new BigDecimal("30.0"), dataBins.get(5).getStart());
        Assert.assertEquals(">", dataBins.get(5).getSpecialValue());
        Assert.assertEquals(57, dataBins.get(5).getCount().intValue());

        Assert.assertEquals("NA", dataBins.get(6).getSpecialValue());
        Assert.assertEquals(8, dataBins.get(6).getCount().intValue());
    }

    @Test
    public void testLinearDataBinnerWithNA()
    {
        String studyId = "blca_tcga";
        String attributeId = "LYMPH_NODE_EXAMINED_COUNT";
        String[] values = mockData.get("blca_tcga_LYMPH_NODE_EXAMINED_COUNT");
        ClinicalDataBinFilter clinicalDataBinFilter = new ClinicalDataBinFilter();
        clinicalDataBinFilter.setAttributeId(attributeId);
        clinicalDataBinFilter.setClinicalDataType(ClinicalDataType.PATIENT);

        List<ClinicalData> clinicalData = mockClinicalData(attributeId, studyId, values);
        List<String> patientIds = clinicalData.stream().map(ClinicalData::getPatientId).collect(Collectors.toList());

        List<DataBin> dataBins = dataBinner.calculateClinicalDataBins(clinicalDataBinFilter, clinicalData, patientIds);

        Assert.assertEquals(15, dataBins.size());

        Assert.assertEquals("<=", dataBins.get(0).getSpecialValue());
        Assert.assertEquals(new BigDecimal("5.0"), dataBins.get(0).getEnd());
        Assert.assertEquals(30, dataBins.get(0).getCount().intValue());

        Assert.assertEquals(new BigDecimal("5.0"), dataBins.get(1).getStart());
        Assert.assertEquals(new BigDecimal("10.0"), dataBins.get(1).getEnd());
        Assert.assertEquals(41, dataBins.get(1).getCount().intValue());

        Assert.assertEquals(new BigDecimal("10.0"), dataBins.get(2).getStart());
        Assert.assertEquals(new BigDecimal("15.0"), dataBins.get(2).getEnd());
        Assert.assertEquals(55, dataBins.get(2).getCount().intValue());

        Assert.assertEquals(new BigDecimal("15.0"), dataBins.get(3).getStart());
        Assert.assertEquals(new BigDecimal("20.0"), dataBins.get(3).getEnd());
        Assert.assertEquals(39, dataBins.get(3).getCount().intValue());

        Assert.assertEquals(new BigDecimal("20.0"), dataBins.get(4).getStart());
        Assert.assertEquals(new BigDecimal("25.0"), dataBins.get(4).getEnd());
        Assert.assertEquals(26, dataBins.get(4).getCount().intValue());

        Assert.assertEquals(new BigDecimal("25.0"), dataBins.get(5).getStart());
        Assert.assertEquals(new BigDecimal("30.0"), dataBins.get(5).getEnd());
        Assert.assertEquals(32, dataBins.get(5).getCount().intValue());

        Assert.assertEquals(new BigDecimal("30.0"), dataBins.get(6).getStart());
        Assert.assertEquals(new BigDecimal("35.0"), dataBins.get(6).getEnd());
        Assert.assertEquals(8, dataBins.get(6).getCount().intValue());

        Assert.assertEquals(new BigDecimal("35.0"), dataBins.get(7).getStart());
        Assert.assertEquals(new BigDecimal("40.0"), dataBins.get(7).getEnd());
        Assert.assertEquals(11, dataBins.get(7).getCount().intValue());

        Assert.assertEquals(new BigDecimal("40.0"), dataBins.get(8).getStart());
        Assert.assertEquals(new BigDecimal("45.0"), dataBins.get(8).getEnd());
        Assert.assertEquals(8, dataBins.get(8).getCount().intValue());

        Assert.assertEquals(new BigDecimal("45.0"), dataBins.get(9).getStart());
        Assert.assertEquals(new BigDecimal("50.0"), dataBins.get(9).getEnd());
        Assert.assertEquals(9, dataBins.get(9).getCount().intValue());

        Assert.assertEquals(new BigDecimal("50.0"), dataBins.get(10).getStart());
        Assert.assertEquals(new BigDecimal("55.0"), dataBins.get(10).getEnd());
        Assert.assertEquals(6, dataBins.get(10).getCount().intValue());

        Assert.assertEquals(new BigDecimal("55.0"), dataBins.get(11).getStart());
        Assert.assertEquals(new BigDecimal("60.0"), dataBins.get(11).getEnd());
        Assert.assertEquals(4, dataBins.get(11).getCount().intValue());

        Assert.assertEquals(new BigDecimal("60.0"), dataBins.get(12).getStart());
        Assert.assertEquals(new BigDecimal("65.0"), dataBins.get(12).getEnd());
        Assert.assertEquals(6, dataBins.get(12).getCount().intValue());

        Assert.assertEquals(new BigDecimal("65.0"), dataBins.get(13).getStart());
        Assert.assertEquals(">", dataBins.get(13).getSpecialValue());
        Assert.assertEquals(28, dataBins.get(13).getCount().intValue());
        
        Assert.assertEquals("NA", dataBins.get(14).getSpecialValue());
        Assert.assertEquals(109, dataBins.get(14).getCount().intValue());
    }

    @Test
    public void testLinearDataBinnerWithZeroIQR()
    {
        String studyId = "impact";
        String attributeId = "DNA_INPUT";
        String[] values = mockData.get("impact_DNA_INPUT");
        ClinicalDataBinFilter clinicalDataBinFilter = new ClinicalDataBinFilter();
        clinicalDataBinFilter.setAttributeId(attributeId);
        clinicalDataBinFilter.setClinicalDataType(ClinicalDataType.SAMPLE);

        List<ClinicalData> clinicalData = mockClinicalData(attributeId, studyId, values);
        List<String> sampleIds = clinicalData.stream().map(ClinicalData::getSampleId).collect(Collectors.toList());

        List<DataBin> dataBins = dataBinner.calculateClinicalDataBins(clinicalDataBinFilter, clinicalData, sampleIds);

        Assert.assertEquals(19, dataBins.size());

        Assert.assertEquals("<=", dataBins.get(0).getSpecialValue());
        Assert.assertEquals(new BigDecimal("60.0"), dataBins.get(0).getEnd());

        Assert.assertEquals(new BigDecimal("60.0"), dataBins.get(1).getStart());
        Assert.assertEquals(new BigDecimal("70.0"), dataBins.get(1).getEnd());
        
        Assert.assertEquals(new BigDecimal("230.0"), dataBins.get(18).getStart());
        Assert.assertEquals(new BigDecimal("240.0"), dataBins.get(18).getEnd());
    }

    @Test
    public void testLinearDataBinnerWithAlwaysZeroIQR()
    {
        String studyId = "unknown";
        String attributeId = "DNA_INPUT";
        String[] values = mockData.get("recursively_always_zero_IQR");
        ClinicalDataBinFilter clinicalDataBinFilter = new ClinicalDataBinFilter();
        clinicalDataBinFilter.setAttributeId(attributeId);
        clinicalDataBinFilter.setClinicalDataType(ClinicalDataType.SAMPLE);

        List<ClinicalData> clinicalData = mockClinicalData(attributeId, studyId, values);
        List<String> sampleIds = clinicalData.stream().map(ClinicalData::getSampleId).collect(Collectors.toList());

        List<DataBin> dataBins = dataBinner.calculateClinicalDataBins(clinicalDataBinFilter, clinicalData, sampleIds);

        Assert.assertEquals(1, dataBins.size());

        Assert.assertEquals("<=", dataBins.get(0).getSpecialValue());
        Assert.assertEquals(new BigDecimal("66.0"), dataBins.get(0).getEnd());
        Assert.assertEquals("all values should be included in a single bin",
            values.length, dataBins.get(0).getCount().intValue());
    }
    
    @Test
    public void testDiscreteDataBinner()
    {
        String studyId = "acyc_fmi_2014";
        String attributeId = "ACTIONABLE_ALTERATIONS";
        String[] values = mockData.get("acyc_fmi_2014_ACTIONABLE_ALTERATIONS");
        ClinicalDataBinFilter clinicalDataBinFilter = new ClinicalDataBinFilter();
        clinicalDataBinFilter.setAttributeId(attributeId);
        clinicalDataBinFilter.setClinicalDataType(ClinicalDataType.SAMPLE);

        List<ClinicalData> clinicalData = mockClinicalData(attributeId, studyId, values);
        List<String> sampleIds = clinicalData.stream().map(ClinicalData::getSampleId).collect(Collectors.toList());

        List<DataBin> dataBins = dataBinner.calculateClinicalDataBins(clinicalDataBinFilter, clinicalData, sampleIds);

        Assert.assertEquals(5, dataBins.size());
        
        Assert.assertEquals(new BigDecimal("0.0"), dataBins.get(0).getStart());
        Assert.assertEquals(new BigDecimal("0.0"), dataBins.get(0).getEnd());
        Assert.assertEquals(16, dataBins.get(0).getCount().intValue());

        Assert.assertEquals(new BigDecimal("1.0"), dataBins.get(1).getStart());
        Assert.assertEquals(new BigDecimal("1.0"), dataBins.get(1).getEnd());
        Assert.assertEquals(6, dataBins.get(1).getCount().intValue());

        Assert.assertEquals(new BigDecimal("2.0"), dataBins.get(2).getStart());
        Assert.assertEquals(new BigDecimal("2.0"), dataBins.get(2).getEnd());
        Assert.assertEquals(4, dataBins.get(2).getCount().intValue());

        Assert.assertEquals(new BigDecimal("3.0"), dataBins.get(3).getStart());
        Assert.assertEquals(new BigDecimal("3.0"), dataBins.get(3).getEnd());
        Assert.assertEquals(1, dataBins.get(3).getCount().intValue());

        Assert.assertEquals(new BigDecimal("5.0"), dataBins.get(4).getStart());
        Assert.assertEquals(new BigDecimal("5.0"), dataBins.get(4).getEnd());
        Assert.assertEquals(1, dataBins.get(4).getCount().intValue());
    }

    @Test
    public void testScientificDataBinner()
    {
        String studyId = "blca_dfarber_mskcc_2014";
        String attributeId = "SILENT_RATE";
        String[] values = mockData.get("blca_dfarber_mskcc_2014_SILENT_RATE");
        String[] samplesWithNoClinicalData = {
            "NA_SAMPLE_01", "NA_SAMPLE_02", "NA_SAMPLE_03", "NA_SAMPLE_04", "NA_SAMPLE_05", "NA_SAMPLE_06"
        };
        ClinicalDataBinFilter clinicalDataBinFilter = new ClinicalDataBinFilter();
        clinicalDataBinFilter.setAttributeId(attributeId);
        clinicalDataBinFilter.setClinicalDataType(ClinicalDataType.SAMPLE);

        List<ClinicalData> clinicalData = mockClinicalData(attributeId, studyId, values);
        List<String> sampleIds = clinicalData.stream().map(ClinicalData::getSampleId).collect(Collectors.toList());
        sampleIds.addAll(Arrays.asList(samplesWithNoClinicalData));

        List<DataBin> dataBins = dataBinner.calculateClinicalDataBins(clinicalDataBinFilter, clinicalData, sampleIds);

        Assert.assertEquals(5, dataBins.size());

        Assert.assertEquals(new BigDecimal("1.0e-8"), dataBins.get(0).getStart());
        Assert.assertEquals(new BigDecimal("1.0e-7"), dataBins.get(0).getEnd());
        Assert.assertEquals(1, dataBins.get(0).getCount().intValue());

        Assert.assertEquals(new BigDecimal("1.0e-7"), dataBins.get(1).getStart());
        Assert.assertEquals(new BigDecimal("1.0e-6"), dataBins.get(1).getEnd());
        Assert.assertEquals(16, dataBins.get(1).getCount().intValue());

        Assert.assertEquals(new BigDecimal("1.0e-6"), dataBins.get(2).getStart());
        Assert.assertEquals(new BigDecimal("1.0e-5"), dataBins.get(2).getEnd());
        Assert.assertEquals(32, dataBins.get(2).getCount().intValue());

        Assert.assertEquals(">", dataBins.get(3).getSpecialValue());
        Assert.assertEquals(new BigDecimal("1.0e-5"), dataBins.get(3).getStart());
        Assert.assertEquals(1, dataBins.get(3).getCount().intValue());

        Assert.assertEquals("NA", dataBins.get(4).getSpecialValue());
        Assert.assertEquals(3 + 6, dataBins.get(4).getCount().intValue());
    }
    
    @Test
    public void testLogScaleDataBinner()
    {
        String studyId = "ampca_bcm_2016";
        String attributeId = "DAYS_TO_LAST_FOLLOWUP";
        String[] values = mockData.get("ampca_bcm_2016_DAYS_TO_LAST_FOLLOWUP");
        ClinicalDataBinFilter clinicalDataBinFilter = new ClinicalDataBinFilter();
        clinicalDataBinFilter.setAttributeId(attributeId);
        clinicalDataBinFilter.setClinicalDataType(ClinicalDataType.PATIENT);

        List<ClinicalData> clinicalData = mockClinicalData(attributeId, studyId, values);
        List<String> patientIds = clinicalData.stream().map(ClinicalData::getPatientId).collect(Collectors.toList());

        List<DataBin> dataBins = dataBinner.calculateClinicalDataBins(clinicalDataBinFilter, clinicalData, patientIds);

        Assert.assertEquals(7, dataBins.size());

        Assert.assertEquals("<=", dataBins.get(0).getSpecialValue());
        Assert.assertEquals(new BigDecimal("10.0"), dataBins.get(0).getEnd());
        Assert.assertEquals(1, dataBins.get(0).getCount().intValue());

        Assert.assertEquals(new BigDecimal("10.0"), dataBins.get(1).getStart());
        Assert.assertEquals(new BigDecimal("31.0"), dataBins.get(1).getEnd());
        Assert.assertEquals(3, dataBins.get(1).getCount().intValue());
        
        Assert.assertEquals(new BigDecimal("31.0"), dataBins.get(2).getStart());
        Assert.assertEquals(new BigDecimal("100.0"), dataBins.get(2).getEnd());
        Assert.assertEquals(5, dataBins.get(2).getCount().intValue());

        Assert.assertEquals(new BigDecimal("100.0"), dataBins.get(3).getStart());
        Assert.assertEquals(new BigDecimal("316.0"), dataBins.get(3).getEnd());
        Assert.assertEquals(23, dataBins.get(3).getCount().intValue());

        Assert.assertEquals(new BigDecimal("316.0"), dataBins.get(4).getStart());
        Assert.assertEquals(new BigDecimal("1000.0"), dataBins.get(4).getEnd());
        Assert.assertEquals(67, dataBins.get(4).getCount().intValue());

        Assert.assertEquals(new BigDecimal("1000.0"), dataBins.get(5).getStart());
        Assert.assertEquals(new BigDecimal("3162.0"), dataBins.get(5).getEnd());
        Assert.assertEquals(55, dataBins.get(5).getCount().intValue());

        Assert.assertEquals(new BigDecimal("3162.0"), dataBins.get(6).getStart());
        Assert.assertEquals(new BigDecimal("10000.0"), dataBins.get(6).getEnd());
        Assert.assertEquals(6, dataBins.get(6).getCount().intValue());
    }

    @Test
    public void testLogScaleDisabledDataBinner()
    {
        String studyId = "ampca_bcm_2016";
        String attributeId = "DAYS_TO_LAST_FOLLOWUP";
        String[] values = mockData.get("ampca_bcm_2016_DAYS_TO_LAST_FOLLOWUP");
        ClinicalDataBinFilter clinicalDataBinFilter = new ClinicalDataBinFilter();
        clinicalDataBinFilter.setAttributeId(attributeId);
        clinicalDataBinFilter.setClinicalDataType(ClinicalDataType.PATIENT);
        clinicalDataBinFilter.setDisableLogScale(true);

        List<ClinicalData> clinicalData = mockClinicalData(attributeId, studyId, values);
        List<String> patientIds = clinicalData.stream().map(ClinicalData::getPatientId).collect(Collectors.toList());

        List<DataBin> dataBins = dataBinner.calculateClinicalDataBins(clinicalDataBinFilter, clinicalData, patientIds);

        Assert.assertEquals(17, dataBins.size());

        Assert.assertEquals("<=", dataBins.get(0).getSpecialValue());
        Assert.assertEquals(new BigDecimal("200.0"), dataBins.get(0).getEnd());
        Assert.assertEquals(17, dataBins.get(0).getCount().intValue());

        Assert.assertEquals(new BigDecimal("200.0"), dataBins.get(1).getStart());
        Assert.assertEquals(new BigDecimal("400.0"), dataBins.get(1).getEnd());
        Assert.assertEquals(24, dataBins.get(1).getCount().intValue());

        Assert.assertEquals(new BigDecimal("3200.0"), dataBins.get(16).getStart());
        Assert.assertEquals(">", dataBins.get(16).getSpecialValue());
        Assert.assertEquals(6, dataBins.get(16).getCount().intValue());
    }

    @Test
    public void testNegativeLogScaleDataBinner()
    {
        String studyId = "acc_tcga";
        String attributeId = "DAYS_TO_BIRTH";
        String[] values = mockData.get("acc_tcga_DAYS_TO_BIRTH");
        ClinicalDataBinFilter clinicalDataBinFilter = new ClinicalDataBinFilter();
        clinicalDataBinFilter.setAttributeId(attributeId);
        clinicalDataBinFilter.setClinicalDataType(ClinicalDataType.PATIENT);

        List<ClinicalData> clinicalData = mockClinicalData(attributeId, studyId, values);
        List<String> patientIds = clinicalData.stream().map(ClinicalData::getPatientId).collect(Collectors.toList());

        List<DataBin> dataBins = dataBinner.calculateClinicalDataBins(clinicalDataBinFilter, clinicalData, patientIds);

        Assert.assertEquals(2, dataBins.size());

        Assert.assertEquals(new BigDecimal("-31622.0"), dataBins.get(0).getStart());
        Assert.assertEquals(new BigDecimal("-10000.0"), dataBins.get(0).getEnd());
        Assert.assertEquals(78, dataBins.get(0).getCount().intValue());
        
        Assert.assertEquals(new BigDecimal("-10000.0"), dataBins.get(1).getStart());
        Assert.assertEquals(new BigDecimal("-3162.0"), dataBins.get(1).getEnd());
        Assert.assertEquals(14, dataBins.get(1).getCount().intValue());
    }

    @Test
    public void testLogScaleDataBinnerWithSpecialOutliers()
    {
        String studyId = "genie";
        String attributeId = "INT_DOD";
        String[] values = mockData.get("genie_INT_DOD");
        ClinicalDataBinFilter clinicalDataBinFilter = new ClinicalDataBinFilter();
        clinicalDataBinFilter.setAttributeId(attributeId);
        clinicalDataBinFilter.setClinicalDataType(ClinicalDataType.PATIENT);

        List<ClinicalData> clinicalData = mockClinicalData(attributeId, studyId, values);
        List<String> patientIds = clinicalData.stream().map(ClinicalData::getPatientId).collect(Collectors.toList());

        List<DataBin> dataBins = dataBinner.calculateClinicalDataBins(clinicalDataBinFilter, clinicalData, patientIds);

        Assert.assertEquals(5, dataBins.size());

        Assert.assertEquals("<=", dataBins.get(0).getSpecialValue());
        Assert.assertEquals(new BigDecimal("6570.0"), dataBins.get(0).getEnd());
        Assert.assertEquals(8, dataBins.get(0).getCount().intValue());

        Assert.assertEquals(new BigDecimal("6570.0"), dataBins.get(1).getStart());
        Assert.assertEquals(new BigDecimal("10000.0"), dataBins.get(1).getEnd());

        Assert.assertEquals(new BigDecimal("10000.0"), dataBins.get(2).getStart());
        Assert.assertEquals(new BigDecimal("31622.0"), dataBins.get(2).getEnd());

        Assert.assertEquals(new BigDecimal("31622.0"), dataBins.get(3).getStart());
        Assert.assertEquals(new BigDecimal("32485.0"), dataBins.get(3).getEnd());
        
        Assert.assertEquals(new BigDecimal("32485.0"), dataBins.get(4).getStart());
        Assert.assertEquals(">", dataBins.get(4).getSpecialValue());
        Assert.assertEquals(5, dataBins.get(4).getCount().intValue());
    }
    
    @Test
    public void testNegativeLogScaleDisabledDataBinner()
    {
        String studyId = "acc_tcga";
        String attributeId = "DAYS_TO_BIRTH";
        String[] values = mockData.get("acc_tcga_DAYS_TO_BIRTH");
        ClinicalDataBinFilter clinicalDataBinFilter = new ClinicalDataBinFilter();
        clinicalDataBinFilter.setAttributeId(attributeId);
        clinicalDataBinFilter.setClinicalDataType(ClinicalDataType.PATIENT);
        clinicalDataBinFilter.setDisableLogScale(true);

        List<ClinicalData> clinicalData = mockClinicalData(attributeId, studyId, values);
        List<String> patientIds = clinicalData.stream().map(ClinicalData::getPatientId).collect(Collectors.toList());

        List<DataBin> dataBins = dataBinner.calculateClinicalDataBins(clinicalDataBinFilter, clinicalData, patientIds);

        Assert.assertEquals(14, dataBins.size());

        Assert.assertEquals("<=", dataBins.get(0).getSpecialValue());
        Assert.assertEquals(new BigDecimal("-30000.0"), dataBins.get(0).getEnd());

        Assert.assertEquals(new BigDecimal("-6000.0"), dataBins.get(13).getStart());
        Assert.assertEquals(">", dataBins.get(13).getSpecialValue());
    }
    
    private List<ClinicalData> mockClinicalData(String attributeId, String studyId, String[] values)
    {
        List<ClinicalData> clinicalDataList =  new ArrayList<>();
        
        for (int index = 0; index < values.length; index++) 
        {
            ClinicalData clinicalData = new ClinicalData();
            
            clinicalData.setAttrId(attributeId);
            clinicalData.setStudyId(studyId);
            clinicalData.setSampleId(studyId + "_sample_" + index);
            clinicalData.setPatientId(studyId + "_patient_" + index);
            clinicalData.setAttrValue(values[index]);
            
            clinicalDataList.add(clinicalData);
        }
        
        return clinicalDataList;
    }
}
