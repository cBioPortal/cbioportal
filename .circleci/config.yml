defaults: &defaults
    docker:
        - image: circleci/node:15.2.1-browsers

version: 2.1

parameters:
  custom_springboot_args:
    type: string
    default: "--spring.profiles.active=clickhouse"

commands:
  build_push_image:
    description: "Build and push cBioPortal image to Dockerhub. Check parameters below for configurable options."
    parameters:
      docker_repo:
        description: Docker repo name
        type: string
        default: "cbioportal/cbioportal-dev"
      app_type:
        description: Type of cBioPortal App (web OR web-and-data OR both)
        type: enum
        enum: ["web", "web-and-data"]
      push:
        description: Push image to DockerHub
        type: enum
        enum: ["true", "false"]
    steps:
      - run:
          name: Build and Push cBioPortal docker image
          command: |
            export DOCKER_TAG=$CIRCLE_SHA1
            export DOCKER_REPO=<<parameters.docker_repo>>
            export APP_TYPE=<<parameters.app_type>>

            if [ $APP_TYPE = "web" ]; then
              URL="https://hub.docker.com/v2/repositories/$DOCKER_REPO/tags/$DOCKER_TAG-web-shenandoah"
            elif [ $APP_TYPE = "web-and-data" ]; then
              URL="https://hub.docker.com/v2/repositories/$DOCKER_REPO/tags/$DOCKER_TAG"
            else
              echo "Unknown app type provided. Accepted values are ['web', 'web-and-data']"
              exit 1
            fi

            TAG_FOUND=$(curl -s $URL | jq -r .name)
            if [ $APP_TYPE = "web" ] && [ $TAG_FOUND = "$DOCKER_TAG-web-shenandoah" ]; then
              echo "Image already exists. Pulling remote image and skipping build step!"
              docker pull $DOCKER_REPO:$DOCKER_TAG-web-shenandoah
              exit 0
            fi
            if [ $APP_TYPE = "web-and-data" ] && [ $TAG_FOUND = "$DOCKER_TAG" ]; then
              echo "Image already exists. Pulling remote image and skipping build step!"
              docker pull $DOCKER_REPO:$DOCKER_TAG
              exit 0
            fi

            cd cbioportal-test
            if [ $APP_TYPE = "web" ]; then
              ./scripts/build-push-image.sh --src=/tmp/repos/cbioportal --push=<<parameters.push>> --skip_web_and_data=true
            elif [ $APP_TYPE = "web-and-data" ]; then
              ./scripts/build-push-image.sh --src=/tmp/repos/cbioportal --push=<<parameters.push>> --skip_web=true
            else
              echo "Unknown app type provided. Accepted values are ['web', 'web-and-data']"
              exit 1
            fi

jobs:
    pull_cbioportal_test_codebase:
      machine:
        image: ubuntu-2204:2024.08.1
      resource_class: medium
      working_directory: /tmp/repos
      steps:
        - run:
            name: Checkout cbioportal/cbioportal-test
            environment:
              TEST_REPO_URL: https://github.com/cBioPortal/cbioportal-test
            command: |
              git clone ${TEST_REPO_URL}
        - persist_to_workspace:
            root: /tmp/repos
            paths:
              - cbioportal-test

    pull_cbioportal_frontend_codebase:
      machine:
        image: ubuntu-2204:2024.08.1
      resource_class: medium
      working_directory: /tmp/repos
      steps:
        - run:
            name: Checkout cbioportal/cbioportal-frontend
            environment:
              FRONTEND_REPO_URL: https://github.com/cBioPortal/cbioportal-frontend.git
              FRONTEND_REPO_BRANCH: master
            command: |
              git clone -b ${FRONTEND_REPO_BRANCH} --single-branch ${FRONTEND_REPO_URL}
        - persist_to_workspace:
            root: /tmp/repos
            paths:
              - cbioportal-frontend

    checkout_pr:
      machine:
        image: ubuntu-2204:2024.08.1
      resource_class: medium
      working_directory: /tmp/repos
      steps:
        - checkout:
            path: /tmp/repos/cbioportal
        - persist_to_workspace:
            root: /tmp/repos
            paths:
              - cbioportal

    build_frontend:
      <<: *defaults
      working_directory: /tmp/repos
      environment:
        BRANCH_ENV: master
      steps:
        - attach_workspace:
            at: /tmp/repos
        - run:
            name: Generate cache key for dist
            command: |
              cd cbioportal-frontend
              echo "Concatenate all source files to use as hash key."
              cat yarn.lock $(find src/ -type f | sort) webpack.config.js vendor-bundles.webpack.config.js > has_source_changed
        - restore_cache:
            keys:
              - v5-dependencies-plus-dist-{{ checksum "cbioportal-frontend/has_source_changed" }}
              - v5-dependencies-{{ checksum "cbioportal-frontend/yarn.lock" }}
        - run:
            name: Download dependencies
            command: |
              cd cbioportal-frontend
              yarn
        - save_cache:
            name: Save dependency cache
            key: v5-dependencies-{{ checksum "cbioportal-frontend/yarn.lock" }}
            paths:
              - cbioportal-frontend/node_modules
        - run:
            name: Build frontend application
            environment:
              DISABLE_SOURCEMAP: true
              NO_PARALLEL: true
            command: |
              cd cbioportal-frontend
              ls dist || yarn run build
        - run:
            name: Build frontend tests
            command: |
              cd cbioportal-frontend/end-to-end-test
              ls node_modules || yarn install --frozen-lockfile --ignore-engines
        - save_cache:
            name: Save dependency plus dist cache
            key: v5-dependencies-plus-dist-{{ checksum "cbioportal-frontend/has_source_changed" }}
            paths:
              - cbioportal-frontend/node_modules
              - cbioportal-frontend/dist
              - cbioportal-frontend/common-dist
        - persist_to_workspace:
            root: /tmp/repos
            paths:
              - cbioportal-frontend

    build_web_image:
      machine:
        image: ubuntu-2204:2024.08.1
      resource_class: medium
      working_directory: /tmp/repos
      environment:
        DOCKER_REPO: cbioportal/cbioportal-dev
      steps:
        - attach_workspace:
            at: /tmp/repos
        - build_push_image:
            app_type: "web"
            push: "false"
        - run:
            name: Save cbioportal image as tar
            command: |
              export DOCKER_TAG=$CIRCLE_SHA1
              docker save -o $DOCKER_TAG-web-shenandoah.tar $DOCKER_REPO:$DOCKER_TAG-web-shenandoah
        - persist_to_workspace:
            root: /tmp/repos
            paths:
              - "*.tar"

    build_web_and_data_image:
      machine:
        image: ubuntu-2204:2024.08.1
      resource_class: medium
      working_directory: /tmp/repos
      environment:
        DOCKER_REPO: cbioportal/cbioportal-dev
      steps:
        - attach_workspace:
            at: /tmp/repos
        - build_push_image:
            app_type: "web-and-data"
            push: "false"
        - run:
            name: Save cbioportal image as tar
            command: |
              export DOCKER_TAG=$CIRCLE_SHA1
              docker save -o $DOCKER_TAG.tar $DOCKER_REPO:$DOCKER_TAG
        - persist_to_workspace:
            root: /tmp/repos
            paths:
              - "*.tar"

    push_web_image:
      machine:
        image: ubuntu-2204:2024.08.1
      resource_class: medium
      working_directory: /tmp/repos
      steps:
        - attach_workspace:
            at: /tmp/repos
        - build_push_image:
            app_type: "web"
            push: "true"

    push_web_and_data_image:
      machine:
        image: ubuntu-2204:2024.08.1
      resource_class: medium
      working_directory: /tmp/repos
      steps:
        - attach_workspace:
            at: /tmp/repos
        - build_push_image:
            app_type: "web-and-data"
            push: "true"

    run_e2e_localdb_tests:
      working_directory: /tmp/repos
      machine:
        image: ubuntu-2204:2024.08.1
      resource_class: large
      environment:
        DOCKER_REPO: cbioportal/cbioportal-dev
        DOCKER_IMAGE_MYSQL: cbioportal/mysql:8.0-database-test
      steps:
        - attach_workspace:
            at: /tmp/repos
        - run:
            name: Load cbioportal image
            command: |
              export DOCKER_TAG=$CIRCLE_SHA1
              docker load -i $DOCKER_TAG.tar
        - run:
            name: Generate keycloak config
            environment:
              STUDIES: 'ascn_test_study study_hg38 teststudy_genepanels study_es_0 lgg_ucsf_2014_test_generic_assay'
            command: |
              git clone https://github.com/cbioportal/cbioportal-docker-compose.git
              cd cbioportal-test
              ./utils/gen-keycloak-config.sh --studies="$STUDIES" --template='/tmp/repos/cbioportal-docker-compose/dev/keycloak/keycloak-config.json' --out='/tmp/repos/keycloak-config-generated.json'
        - run:
            name: Start backend server with keycloak
            environment:
              KEYCLOAK_CONFIG_PATH: '/tmp/repos/keycloak-config-generated.json'
              APPLICATION_PROPERTIES_PATH: '/tmp/repos/cbioportal-frontend/end-to-end-test/local/runtime-config/portal.properties'
            command: |
              cd cbioportal-test
              export DOCKER_IMAGE_CBIOPORTAL=$DOCKER_REPO:$CIRCLE_SHA1
              nohup ./scripts/docker-compose.sh --portal_type='keycloak' >> /tmp/repos/docker-compose-logs.txt 2>&1 &
        - run:
            name: Check keycloak connection at localhost
            command: |
              cd cbioportal-test
              ./utils/check-connection.sh --url=localhost:8081 --max_retries=50
        - run:
            name: Check backend connection at localhost
            command: |
              cd cbioportal-test
              ./utils/check-connection.sh --url=localhost:8080 --max_retries=50
        - run:
            name: Run end-2-end tests with studies in local database
            environment:
              CBIOPORTAL_URL: http://localhost:8080
              JUNIT_REPORT_PATH: ./local/junit
              SCREENSHOT_DIRECTORY: ./local/screenshots
              PORTAL_SOURCE_DIR: /tmp/repos/cbioportal-frontend
              TEST_HOME: /tmp/repos/cbioportal-frontend/end-to-end-test/local
              FRONTEND_TEST_DO_NOT_LOAD_EXTERNAL_FRONTEND: true
              SPEC_FILE_PATTERN: ./local/specs/**/*.spec.js
            command: |
              cd $PORTAL_SOURCE_DIR && \
              $TEST_HOME/docker_compose/test.sh
        - run:
            name: Make sure all screenshots are tracked (otherwise the test will always be successful)
            environment:
              TEST_HOME: /tmp/repos/cbioportal-frontend/end-to-end-test/local
            command: |
              for f in $TEST_HOME/screenshots/reference/*.png; do
                git ls-files --error-unmatch $f > /dev/null 2> /dev/null ||
                (echo -e "\033[0;31m $f not tracked \033[0m" && touch screenshots_not_tracked);
              done;
              ls screenshots_not_tracked > /dev/null 2> /dev/null && exit 1 || exit 0
        - store_artifacts:
            path: /tmp/repos/docker-compose-logs.txt
        -  store_artifacts:
             path: /tmp/repos/cbioportal-frontend/end-to-end-test/local/screenshots
             destination: /screenshots
        -  store_artifacts:
             path: /tmp/repos/cbioportal-frontend/end-to-end-test/shared/image-compare
             destination: /image-compare
        -  store_artifacts:
             path: /tmp/repos/cbioportal-frontend/end-to-end-test/local/errorShots
             destination: /errorShots
        - store_test_results:
            path: /tmp/repos/cbioportal-frontend/end-to-end-test/local/junit
        - store_artifacts:
            path: /tmp/repos/cbioportal-frontend/end-to-end-test/local/junit
        - store_artifacts:
            path: /tmp/repos/cbioportal-frontend/end-to-end-test/shared/imageCompare.html
            destination: /imageCompare.html
        - store_artifacts:
            path: /tmp/repos/cbioportal-frontend/end-to-end-test/local/junit/customReport.json
            destination: /customReport.json
        - store_artifacts:
            path: /tmp/repos/cbioportal-frontend/end-to-end-test/local/junit/errors/
            destination: /errors

    run_api_tests:
      machine:
        image: ubuntu-2204:2024.08.1
        docker_layer_caching: true
      resource_class: large
      working_directory: /tmp/repos
      environment:
        DOCKER_REPO: cbioportal/cbioportal-dev
      steps:
        - attach_workspace:
            at: /tmp/repos
        - run:
            name: Load cbioportal image
            command: |
              export DOCKER_TAG=$CIRCLE_SHA1
              docker load -i $DOCKER_TAG-web-shenandoah.tar
        - run:
            name: Instantiate a cbioportal instance
            environment:
              APP_CLICKHOUSE_MODE: "true"
              APP_CUSTOM_ARGS: << pipeline.parameters.custom_springboot_args >>
            command: |
              cd cbioportal-test
              export DOCKER_IMAGE_CBIOPORTAL=$DOCKER_REPO:$CIRCLE_SHA1-web-shenandoah
              nohup ./scripts/docker-compose.sh >> /tmp/repos/docker-compose-logs.txt 2>&1 &
        - run:
            name: Wait for cbioportal to be live at localhost
            command: |
              cd cbioportal-test
              ./utils/check-connection.sh --url=localhost:8080
        - run:
            name: Confirm cbioportal config matches PR
            command: |
              cd cbioportal
              echo "Matching gitCommitId..."
              INSTANCE_COMMIT_ID=$(curl -s http://localhost:8080/api/info | jq -r '.["gitCommitId"]')
              PR_COMMIT_ID=$CIRCLE_SHA1
              if [ "$INSTANCE_COMMIT_ID" = "$PR_COMMIT_ID" ]; then
                echo "gitCommitId successfully matched!"
                echo "cBioPortal is ready:"
                curl -s http://localhost:8080/api/info | jq
                exit 0
              else
                echo "gitCommitIds do not match!"
                echo "Instance Commit ID: $INSTANCE_COMMIT_ID"
                echo "PR Commit ID: $PR_COMMIT_ID"
                exit 1
              fi
        - run:
            name: Run API Tests
            environment:
              API_TEST_HOST: http://localhost:8080
              BACKEND_ROOT: /tmp/repos/cbioportal
            command: |
              cd cbioportal-frontend
              nvm install 15.2.1
              nvm use 15.2.1
              npm install -g yarn@1.22.5
              yarn --ignore-engines
              yarn run apitests

        - store_artifacts:
            path: /tmp/repos/docker-compose-logs.txt

    run_security_tests:
      machine:
        image: ubuntu-2204:2024.08.1
        docker_layer_caching: true
      resource_class: medium
      working_directory: /tmp/repos
      environment:
        BASE_REPO: cbioportal/cbioportal
        DEV_REPO: cbioportal/cbioportal-dev
        OUTPUT_FORMAT: '{severity: .cvss.severity, source_id: .source_id, vulnerable_range: .vulnerable_range, fixed_by: .fixed_by, url: .url, description: .description}'
        SORT: 'sort_by(.severity | if . == "CRITICAL" then 0 elif . == "HIGH" then 1 elif . == "MEDIUM" then 2 elif . == "LOW" then 3 else 4 end)'
      steps:
        - attach_workspace:
              at: /tmp/repos
        - run:
            name: Install Docker Scout
            command: |
              curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s -- -b /home/circleci/bin
        - run:
            name: Log in to Docker
            command: |
              echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - run:
            name: Load cbioportal image
            command: |
              export DOCKER_TAG=$CIRCLE_SHA1
              docker load -i $DOCKER_TAG-web-shenandoah.tar
        - run:
            name: Run Docker Scout on master
            command: |
              IMAGE=$BASE_REPO:master-web-shenandoah
              docker pull $IMAGE
              docker-scout cves $IMAGE --format sbom | jq -r "[.vulnerabilities[].vulnerabilities[] | $OUTPUT_FORMAT] | $SORT" > master_report.sbom
              echo "Docker Scout Report for Master"
              cat master_report.sbom | jq
        - run:
            name: Run Docker Scout on PR
            command: |
              IMAGE=$DEV_REPO:$CIRCLE_SHA1-web-shenandoah
              docker-scout cves $IMAGE --format sbom | jq -r "[.vulnerabilities[].vulnerabilities[] | $OUTPUT_FORMAT] | $SORT" > pr_report.sbom
              echo "Docker Scout Report for PR"
              cat pr_report.sbom | jq
        - run:
            name: Analyze and report results
            command: |
              DIFF=$(jq -s 'map(map(.source_id)) | .[0] - .[1]' pr_report.sbom master_report.sbom)
              COUNT=$(echo $DIFF | jq 'length')
              if [ "$COUNT" -gt 0 ]; then
                printf "New vulnerabilities found: $COUNT\n"
                jq '.[] | select(.source_id as $a | '"$DIFF"' | index($a))' pr_report.sbom
                exit 1
              else
                echo "No new vulnerabilities found!"
                echo "Individual reports for master and pr have been saved under the Artifacts tab."
                exit 0
              fi
        - persist_to_workspace:
            root: /tmp/repos
            paths:
              - master_report.sbom
        - store_artifacts:
            path: /tmp/repos/master_report.sbom
        - store_artifacts:
            path: /tmp/repos/pr_report.sbom

    update_security_status_badge:
      machine:
        image: ubuntu-2204:2024.08.1
      resource_class: medium
      working_directory: /tmp/repos
      environment:
        SUCCESS_MESSAGE: 'Passing'
        SUCCESS_COLOR: 'brightgreen'
        FAILURE_MESSAGE: 'Failing'
        FAILURE_COLOR: 'FF0A0A'
        SEVERITY_THRESHOLD: 'CRITICAL'
        TEST_REPO_URL: 'git@github.com:cBioPortal/cbioportal-test.git'
      steps:
        - attach_workspace:
            at: /tmp/repos
        - add_ssh_keys:
            fingerprints:
              - "SHA256:vtzpWrYBLQAMgZIsEv3Nuc1HeINJXFFtUB+IpSY/AK4"
        - run:
            name: Set up git user
            command: |
              git config --global user.name "CircleCI Bot"
              git config --global user.email "bot@circleci.com"
        - run:
            name: Clone test repo using ssh url
            command: |
              rm -rf cbioportal-test
              git clone $TEST_REPO_URL
        - run:
            name: Count vulnerabilities and update status badge
            command: |
              COUNT=$(jq '[.[] | select(.severity == "$SEVERITY_THRESHOLD")] | length' master_report.sbom)
              cd cbioportal-test
              if [ $COUNT -eq 0 ]; then
                jq --arg msg "$SUCCESS_MESSAGE" --arg col "$SUCCESS_COLOR" '.message = $msg | .color = $col' security-status.json > temp.json
              else
                jq --arg msg "$FAILURE_MESSAGE" --arg col "$FAILURE_COLOR" '.message = $msg | .color = $col' security-status.json > temp.json
              fi
              mv temp.json security-status.json
              echo "security-status.json has been updated:"
              cat security-status.json | jq
        - run:
            name: Push new security status to cbioportal/cbioportal-test
            command: |
              cd cbioportal-test
              git diff
              git add security-status.json
              git commit -m "Update security status" || echo "No changes to commit"
              git push

workflows:
    tests:
      jobs:
        - checkout_pr
        - pull_cbioportal_test_codebase
        - pull_cbioportal_frontend_codebase
        - build_frontend:
            requires:
              - pull_cbioportal_frontend_codebase
        - build_web_image:
            context:
              - github-packages
            requires:
              - checkout_pr
              - pull_cbioportal_test_codebase
        - build_web_and_data_image:
            context:
              - github-packages
            requires:
              - checkout_pr
              - pull_cbioportal_test_codebase
        - push_web_image:
            context:
              - api-tests
              - github-packages
            requires:
              - checkout_pr
              - pull_cbioportal_test_codebase
        - push_web_and_data_image:
            context:
              - api-tests
              - github-packages
            requires:
              - checkout_pr
              - pull_cbioportal_test_codebase
        - run_e2e_localdb_tests:
            requires:
              - build_frontend
              - build_web_and_data_image
        - run_api_tests:
            context:
              - api-tests
            requires:
              - build_web_image
              - pull_cbioportal_frontend_codebase
        - run_security_tests:
            context:
              - docker-scout
            requires:
              - build_web_image
        - update_security_status_badge:
            requires:
              - run_security_tests
            filters:
              branches:
                only:
                  - master
