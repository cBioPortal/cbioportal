<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.cbioportal.persistence.mybatisclickhouse.StudyViewMapper">

    <!-- for /filtered-sample/fetch (returns Sample objects) -->
    <select id="getFilteredSamples" resultType="org.cbioportal.model.Sample">
        SELECT
            patient_stable_id as patientStableId,
            sample_stable_id as stableId,
            cancer_study_identifier as cancerStudyIdentifier,
            sample_unique_id_base64 as uniqueSampleKey,
            patient_unique_id_base64 as uniquePatientKey
        FROM sample_mv
        <where>
            sample_unique_id IN ( <include refid="sampleUniqueIdsFromStudyViewFilter"/>)
            
            <if test="applyPatientIdFilters == true">
                AND patient_unique_id IN (<include refid="patientUniqueIdsFromStudyViewFilter"/>)
            </if>
        </where>
        ORDER BY sample_stable_id ASC;
    </select>

    <!-- /mutated-genes/fetch (returns AlterationCountByGene) -->
    <select id="getMutatedGenes" resultMap="alterationCountByGene">
        SELECT
            hugo_gene_symbol as hugoGeneSymbol,
            1 as entrezGeneId,
            COUNT(DISTINCT sample_unique_id) as numberOfAlteredCases,
            COUNT(*) as totalCount
        FROM genomic_event_mutation
        <where>
            sample_unique_id IN ( <include refid="sampleUniqueIdsFromStudyViewFilter"/>
            <if test="applyPatientIdFilters == true">
                INTERSECT <include refid="getSampleIdsFromPatientIds"/>
            </if> 
            )
            <if test="alterationFilterHelper.shouldApply()">
                <include refid="mutationAlterationFilter"/>
            </if>
        </where>
        GROUP BY hugo_gene_symbol
        ORDER BY totalCount DESC;
    </select>

    <!-- TODO only fetching from sample_clinical_attribute_numeric, need to support sample_clinical_attribute_categorical as well -->
    <select id="getSampleClinicalDataFromStudyViewFilter" resultType="org.cbioportal.model.ClinicalData">
        SELECT
            sample_unique_id as sampleId,
            patient_unique_id as patientId,
            attribute_name as attrId,
            attribute_value as attrValue,
            cancer_study_identifier as studyId
        FROM sample_clinical_attribute_numeric_mv
        <where>
            sample_unique_id IN (
            <include refid="sampleUniqueIdsFromStudyViewFilter"/>
            <if test="applyPatientIdFilters == true">
                INTERSECT <include refid="getSampleIdsFromPatientIds"/>
            </if>
            )
        </where>
        <if test="attributeIds != null and !attributeIds.isEmpty()">
            AND attribute_name IN
            <foreach item="attributeId" collection="attributeIds" open="(" separator="," close=")">
                #{attributeId}
            </foreach>
        </if>
    </select>
    
    <!-- TODO only fetching from patient_clinical_attribute_numeric, need to support patient_clinical_attribute_categorical as well -->
    <select id="getPatientClinicalDataFromStudyViewFilter" resultType="org.cbioportal.model.ClinicalData">
        SELECT
            patient_unique_id as patientId,
            attribute_name as attrId,
            attribute_value as attrValue,
            cancer_study_identifier as studyId
        FROM patient_clinical_attribute_numeric_mv
        <where> 
            patient_unique_id IN (
                <include refid="getPatientIdsFromSampleIdFilters"/>
                <if test="applyPatientIdFilters == true">
                    INTERSECT <include refid="patientUniqueIdsFromStudyViewFilter"/>
                </if>
            )
        </where>
        <if test="attributeIds != null and !attributeIds.isEmpty()">
            AND attribute_name IN
            <foreach item="attributeId" collection="attributeIds" open="(" separator="," close=")">
                #{attributeId}
            </foreach>
        </if>
    </select>
   
    <!-- for /clinical-data-counts/fetch (returns ClinicalData) which will then be converted to clinicalDataCountItems -->
    <select id="getClinicalDataCounts" resultType="org.cbioportal.model.ClinicalDataCount">
        <include refid="getCategoricalClinicalDataCountsQuerySample">
            <property name="table_name_prefix" value="sample"/>
        </include>
        UNION ALL
        <include refid="getCategoricalClinicalDataCountsQueryPatient">
            <property name="table_name_prefix" value="patient"/>
        </include>
    </select>
    
    <sql id="getCategoricalClinicalDataCountsQuery">
        SELECT
        attribute_name as attributeId,
        CASE WHEN attribute_value = 'NULL' THEN 'NA' ELSE attribute_value END AS value,
        Count(*) as count
        FROM ${table_name_prefix}_clinical_attribute_categorical_view
        <where>
            patient_unique_id IN ( <include refid="getPatientIdsFromSampleIdFilters"/>
            <if test="applyPatientIdFilters == true">
                INTERSECT <include refid="patientUniqueIdsFromStudyViewFilter"/>
            </if>
            )
            AND UPPER(attribute_value) NOT IN
            <foreach item="filteredAttributeValue" collection="filteredAttributeValues" open="(" separator="," close=")">
                #{filteredAttributeValue}
            </foreach>
            AND attribute_name IN
            <foreach item="attributeId" collection="attributeIds" open="(" separator="," close=")">
                #{attributeId}
            </foreach>
        </where>
        GROUP BY attribute_name,
        attribute_value
    </sql>

    
    
    
    
    
    <sql id="getCategoricalClinicalDataCountsQuerySample">
        SELECT
        attribute_name as attributeId,
        if(attribute_value='', 'NA', attribute_value) AS value,
        count(value) as count
        FROM clinical_data_derived
        <where>
            type='sample' AND
            sample_unique_id IN (<include refid="sampleUniqueIdsFromStudyViewFilter"/>
            <if test="applyPatientIdFilters == true">
                INTERSECT
                SELECT sample_unique_id from sample_mv WHERE sample_mv.patient_unique_id IN
                (<include refid="patientUniqueIdsFromStudyViewFilter"/>)
            </if>
            )
            <if test="filteredAttributeValues != null and !filteredAttributeValues.isEmpty()">
                AND UPPER(value) NOT IN
                <foreach item="filteredAttributeValue" collection="filteredAttributeValues" open="(" separator="," close=")">
                    #{filteredAttributeValue}
                </foreach> 
            </if>
            AND attribute_name IN
            <foreach item="attributeId" collection="attributeIds" open="(" separator="," close=")">
                #{attributeId}
            </foreach>
        </where>
        GROUP BY attribute_name,
        value
    </sql>

    <sql id="getCategoricalClinicalDataCountsQueryPatient">
        SELECT
        attribute_name as attributeId,
        if(attribute_value='', 'NA', attribute_value) AS value,
        count(value) as count
        FROM clinical_data_derived
        <where>
            type='patient' AND
            patient_unique_id IN ( <include refid="getPatientIdsFromSampleIdFilters"/>
            <if test="applyPatientIdFilters == true">
                INTERSECT <include refid="patientUniqueIdsFromStudyViewFilter"/>
            </if>
            )
            <if test="filteredAttributeValues != null and !filteredAttributeValues.isEmpty()">
                AND UPPER(value) NOT IN
                <foreach item="filteredAttributeValue" collection="filteredAttributeValues" open="(" separator="," close=")">
                    #{filteredAttributeValue}
                </foreach>
            </if>
            AND attribute_name IN
            <foreach item="attributeId" collection="attributeIds" open="(" separator="," close=")">
                #{attributeId}
            </foreach>
        </where>
        GROUP BY attribute_name,
        value
    </sql>
    
    
    
    <select id="getPatientClinicalDataCounts" resultType="org.cbioportal.model.ClinicalDataCount">
        <include refid="getCategoricalClinicalDataCountsQuery">
            <property name="table_name_prefix" value="patient"/>
        </include>
    </select>
    
    <select id="getSampleClinicalDataCounts" resultType="org.cbioportal.model.ClinicalDataCount">
        <include refid="getCategoricalClinicalDataCountsQuery">
            <property name="table_name_prefix" value="sample"/>
        </include>
    </select>
    
    <sql id="getSampleIdsFromPatientIds">
        SELECT sample_unique_id
        FROM sample_mv
        <where>
            patient_unique_id IN (<include refid="patientUniqueIdsFromStudyViewFilter"/>) 
        </where>
    </sql>
    
    <sql id="getPatientIdsFromSampleIdFilters">
        SELECT patient_unique_id
        FROM sample_mv
        <where>
            sample_unique_id IN (<include refid="sampleUniqueIdsFromStudyViewFilter"/>)
        </where>
    </sql>
    
    <select id="getClinicalAttributeNames" resultType="String">
        SELECT
        DISTINCT(attribute_name)
        FROM ${tableName};
    </select>

    <!-- Grab Total Profiled Counts -->
    <select id="getTotalProfiledCounts">
        SELECT
        gene as hugoGeneSymbol,
        COUNT(*) as numberOfProfiledCases
        FROM sample_to_gene_panel stgp
            INNER JOIN gene_panel_to_gene gptg on stgp.gene_panel_id = gptg.gene_panel_id 
        <where>
            stgp.alteration_type = '${alterationType}' 
            AND
            sample_unique_id IN ( <include refid="sampleUniqueIdsFromStudyViewFilter"/>
            <if test="applyPatientIdFilters == true">
                INTERSECT <include refid="getSampleIdsFromPatientIds"/>
            </if>
            )
        </where>
        GROUP BY gptg.gene;
    </select>

    <!-- Helper query to get counts for totalProfiledCount when no genePanel data is available. 
    When no genePanel data is available we assume the whole genome was sequenced AKA WES (Whole Exome Sequencing). If this 
    is the case we use the current sample count from the cohort as the totalProfiledCount -->
    <select id="getFilteredSamplesCount" resultType="int">
        SELECT
            COUNT(*)
        FROM sample_mv
        <where>
            sample_unique_id IN ( <include refid="sampleUniqueIdsFromStudyViewFilter"/>)

            <if test="applyPatientIdFilters == true">
                AND patient_unique_id IN (<include refid="patientUniqueIdsFromStudyViewFilter"/>)
            </if>
        </where>
    </select>
    
    <!-- Get Matching Gene Panel Ids for all Samples after study view filter -->
    <select id="getMatchingGenePanelIds" resultMap="alterationCountByGene">
        SELECT
            gene as hugoGeneSymbol,
            arrayFilter(x -> x != '', groupArray( distinct gene_panel_id)) as matchingGenePanelIds
        FROM gene_panel_to_gene
        <where>
            gene_panel_id in (
                select distinct gene_panel_id
                from sample_to_gene_panel
                <where>
                    alteration_type = '${alterationType}' AND
                    sample_unique_id IN ( <include refid="sampleUniqueIdsFromStudyViewFilter"/>)
                    <if test="applyPatientIdFilters == true">
                        AND patient_unique_id IN (<include refid="patientUniqueIdsFromStudyViewFilter"/>)
                    </if>
                </where>
            )
        </where>
        GROUP BY gene;
    </select>
    
    <!-- Define the resultMap for AlterationCountByGene -->
    <resultMap id="alterationCountByGene" type="org.cbioportal.model.AlterationCountByGene">
        <result property="hugoGeneSymbol" column="hugoGeneSymbol"/>
        <result property="entrezGeneId" column="entrezGeneId"/>
        <result property="numberOfAlteredCases" column="numberOfAlteredCases"/>
        <result property="totalCount" column="totalCount"/>
        <result property="matchingGenePanelIds" column="matchingGenePanelIds" typeHandler="org.cbioportal.persistence.mybatisclickhouse.typehandler.GenePanelIdsTypeHandler"/>
    </resultMap>
</mapper>
