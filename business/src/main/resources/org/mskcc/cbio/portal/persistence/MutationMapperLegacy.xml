<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.mskcc.cbio.portal.persistence.MutationMapperLegacy">

    <select id="getMutationsDetailed" resultType="org.mskcc.cbio.portal.model.Mutation">
        select

        mutation.CENTER as center,
        mutation.MUTATION_STATUS as mutationStatus,
        mutation.TUMOR_REF_COUNT as tumorRefCount,
        mutation.NORMAL_REF_COUNT as normalRefCount,
        mutation.TUMOR_ALT_COUNT as tumorAltCount,
        mutation.NORMAL_ALT_COUNT as normalAltCount,
        mutation.VALIDATION_STATUS as validationStatus,

        mutation_event.MUTATION_TYPE as "mutationEvent.mutationType",
        mutation_event.PROTEIN_CHANGE as "mutationEvent.proteinChange",
        mutation_event.FUNCTIONAL_IMPACT_SCORE as "mutationEvent.functionalImpactScore",
        mutation_event.LINK_XVAR as "mutationEvent.linkXvar",
        mutation_event.LINK_PDB as "mutationEvent.linkPdb",
        mutation_event.LINK_MSA as "mutationEvent.linkMsa",
        mutation_event.CHR as "mutationEvent.chr",
        mutation_event.START_POSITION as "mutationEvent.startPosition",
        mutation_event.END_POSITION as "mutationEvent.endPosition",
        mutation_event.ONCOTATOR_PROTEIN_POS_START as "mutationEvent.oncotatorProteinPosStart",
        mutation_event.ONCOTATOR_PROTEIN_POS_END as "mutationEvent.oncotatorProteinPosEnd",
        mutation_event.REFERENCE_ALLELE as "mutationEvent.referenceAllele",
        mutation_event.TUMOR_SEQ_ALLELE as "mutationEvent.tumorSeqAllele",
        mutation_event.KEYWORD as "mutationEvent.keyword",

        gene.HUGO_GENE_SYMBOL as "gene.hugoGeneSymbol",
        gene.ENTREZ_GENE_ID as "gene.entrezGeneId",

        sample.INTERNAL_ID as sampleId,

        cancer_study.CANCER_STUDY_ID as "geneticProfile.cancerStudyId",

        genetic_profile.GENETIC_PROFILE_ID as geneticProfileId

        from mutation
        inner join mutation_event on mutation.MUTATION_EVENT_ID = mutation_event.MUTATION_EVENT_ID
        inner join sample on mutation.SAMPLE_ID = sample.INTERNAL_ID
        inner join gene on mutation.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID
        inner join genetic_profile on genetic_profile.GENETIC_PROFILE_ID = mutation.GENETIC_PROFILE_ID
        inner join cancer_study on genetic_profile.CANCER_STUDY_ID = cancer_study.CANCER_STUDY_ID
        <if test="sampleListStableId != null">
            inner join sample_list_list on sample_list_list.SAMPLE_ID = sample.INTERNAL_ID
            inner join sample_list on sample_list.LIST_ID = sample_list_list.LIST_ID
        </if>
        <where>
            <if test="geneticProfileStableIds != null and !geneticProfileStableIds.isEmpty()">
                genetic_profile.STABLE_ID in
                <foreach item="item" collection="geneticProfileStableIds" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="hugoGeneSymbols != null and !hugoGeneSymbols.isEmpty()">
                and gene.HUGO_GENE_SYMBOL in
                <foreach item="item" collection="hugoGeneSymbols" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="sampleStableIds != null and !sampleStableIds.isEmpty()">
                and sample.STABLE_ID in
                <foreach item="item" collection="sampleStableIds" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="sampleListStableId != null">
                and sample_list.STABLE_ID = #{sampleListStableId}
            </if>
        </where>
    </select>

    <select id="getMutations" resultType="org.mskcc.cbio.portal.model.Mutation">
        select

        mutation.SAMPLE_ID as sampleId,
        mutation.ENTREZ_GENE_ID as entrezGeneId

        <if test="!simplified">
            , mutation.MUTATION_EVENT_ID as mutationEventId,
            mutation.GENETIC_PROFILE_ID as geneticProfileId,
            mutation.CENTER as center,
            mutation.SEQUENCER as sequencer,
            mutation.MUTATION_STATUS as mutationStatus,
            mutation.VALIDATION_STATUS as validationStatus,
            mutation.TUMOR_SEQ_ALLELE1 as tumorSeqAllele1,
            mutation.TUMOR_SEQ_ALLELE2 as tumorSeqAllele2,
            mutation.MATCHED_NORM_SAMPLE_BARCODE as matchedNormSampleBarcode,
            mutation.MATCH_NORM_SEQ_ALLELE1 as matchNormSeqAllele1,
            mutation.MATCH_NORM_SEQ_ALLELE2 as matchNormSeqAllele2,
            mutation.TUMOR_VALIDATION_ALLELE1 as tumorValidationAllele1,
            mutation.TUMOR_VALIDATION_ALLELE2 as tumorValidationAllele2,
            mutation.MATCH_NORM_VALIDATION_ALLELE1 as matchNormValidationAllele1,
            mutation.MATCH_NORM_VALIDATION_ALLELE2 as matchNormValidationAllele2,
            mutation.VERIFICATION_STATUS as verificationStatus,
            mutation.SEQUENCING_PHASE as sequencingPhase,
            mutation.SEQUENCE_SOURCE as sequenceSource,
            mutation.VALIDATION_METHOD as validationMethod,
            mutation.SCORE as score,
            mutation.BAM_FILE as bamFile,
            mutation.TUMOR_ALT_COUNT as tumorAltCount,
            mutation.TUMOR_REF_COUNT as tumorRefCount,
            mutation.NORMAL_ALT_COUNT as normalAltCount,
            mutation.NORMAL_REF_COUNT as normalRefCount,
            mutation.AMINO_ACID_CHANGE as aminoAcidChange,

            mutation_event.MUTATION_EVENT_ID as "mutationEvent.mutationEventId",
            mutation_event.ENTREZ_GENE_ID as "mutationEvent.entrezGeneId",
            mutation_event.CHR as "mutationEvent.chr",
            mutation_event.START_POSITION as "mutationEvent.startPosition",
            mutation_event.END_POSITION as "mutationEvent.endPosition",
            mutation_event.REFERENCE_ALLELE as "mutationEvent.referenceAllele",
            mutation_event.TUMOR_SEQ_ALLELE as "mutationEvent.tumorSeqAllele",
            mutation_event.PROTEIN_CHANGE as "mutationEvent.proteinChange",
            mutation_event.MUTATION_TYPE as "mutationEvent.mutationType",
            mutation_event.FUNCTIONAL_IMPACT_SCORE as "mutationEvent.functionalImpactScore",
            mutation_event.FIS_VALUE as "mutationEvent.fisValue",
            mutation_event.LINK_XVAR as "mutationEvent.linkXvar",
            mutation_event.LINK_PDB as "mutationEvent.linkPdb",
            mutation_event.LINK_MSA as "mutationEvent.linkMsa",
            mutation_event.NCBI_BUILD as "mutationEvent.ncbiBuild",
            mutation_event.STRAND as "mutationEvent.strand",
            mutation_event.VARIANT_TYPE as "mutationEvent.variantType",
            mutation_event.DB_SNP_RS as "mutationEvent.dbSnpRs",
            mutation_event.DB_SNP_VAL_STATUS as "mutationEvent.dbSnpValStatus",
            mutation_event.ONCOTATOR_DBSNP_RS as "mutationEvent.oncotatorDbsnpRs",
            mutation_event.ONCOTATOR_REFSEQ_MRNA_ID as "mutationEvent.oncotatorRefseqMrnaId",
            mutation_event.ONCOTATOR_CODON_CHANGE as "mutationEvent.oncotatorCodonChange",
            mutation_event.ONCOTATOR_UNIPROT_ENTRY_NAME as "mutationEvent.oncotatorUniprotEntryName",
            mutation_event.ONCOTATOR_UNIPROT_ACCESSION as "mutationEvent.oncotatorUniprotAccession",
            mutation_event.ONCOTATOR_PROTEIN_POS_START as "mutationEvent.oncotatorProteinPosStart",
            mutation_event.ONCOTATOR_PROTEIN_POS_END as "mutationEvent.oncotatorProteinPosEnd",
            mutation_event.CANONICAL_TRANSCRIPT as "mutationEvent.canonicalTranscript",
            mutation_event.KEYWORD as "mutationEvent.keyword",

            gene.HUGO_GENE_SYMBOL as "gene.hugoGeneSymbol",
            gene.ENTREZ_GENE_ID as "gene.entrezGeneId"
        </if>
        from mutation
        <if test="!simplified">
          inner join mutation_event on mutation.MUTATION_EVENT_ID = mutation_event.MUTATION_EVENT_ID
          inner join gene on mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID
        </if>

        <where>
            <if test="sampleIds != null and !sampleIds.isEmpty()">
                SAMPLE_ID in
                <foreach item="item" collection="sampleIds" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="entrezGeneIds != null and !entrezGeneIds.isEmpty()">
                and mutation.ENTREZ_GENE_ID in
                <foreach item="item" collection="entrezGeneIds" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test="geneticProfileId != null">
                and GENETIC_PROFILE_ID = #{geneticProfileId}
            </if>
        </where>
    </select>

    <select id="hasAlleleFrequencyData" resultType="boolean">
        select

        exists (

          select 1 from mutation

          where GENETIC_PROFILE_ID = #{geneticProfileId}

          and SAMPLE_ID = #{sampleId}

          and TUMOR_ALT_COUNT >= 0

          and TUMOR_REF_COUNT >= 0
        )
    </select>

    <insert  id = "groupConcatMaxLenSet">
        SET SESSION group_concat_max_len = 1000000;
    </insert>

    <select id="getSignificantlyMutatedGenes" resultType="org.mskcc.cbio.portal.model.SignificantlyMutatedGene">
        select

        mutation.ENTREZ_GENE_ID as entrezGeneId,
        GROUP_CONCAT(mutation.SAMPLE_ID) as concatenatedSampleIds,
        count(*) as count,
        count(*)/`LENGTH` as count_per_nt

        from mutation, gene

        where mutation.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID
        and GENETIC_PROFILE_ID = #{geneticProfileId}

        <if test="entrezGeneIds != null and !entrezGeneIds.isEmpty()">
            and mutation.ENTREZ_GENE_ID in
            <foreach item="item" collection="entrezGeneIds" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="sampleIds != null and !sampleIds.isEmpty()">
            and mutation.SAMPLE_ID in
            <foreach item="item" collection="sampleIds" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>

        group by mutation.ENTREZ_GENE_ID

        <if test="thresholdRecurrence > 0">
            having count(*) >= #{thresholdRecurrence}
        </if>

        order by count_per_nt desc

        <if test="thresholdNumGenes > 0">
            LIMIT 0, #{thresholdNumGenes}
        </if>

    </select>

    <select id="countMutationEvents" resultType="org.mskcc.cbio.portal.model.MutationCount">
        select

        INTERNAL_ID as sampleId,
        CONVERT(SUBSTRING_INDEX(ATTR_VALUE,'-',-1),UNSIGNED INTEGER) as mutationCount

        from clinical_sample

        where ATTR_ID = 'MUTATION_COUNT'

        <if test="sampleIds != null and !sampleIds.isEmpty()">
            and INTERNAL_ID in
            <foreach item="item" collection="sampleIds" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
    </select>

    <select id="countSamplesWithMutatedGenes" resultType="org.mskcc.cbio.portal.model.MutatedGeneSampleCount">

        select

        ENTREZ_GENE_ID as entrezGeneId,
        count(distinct SAMPLE_ID) as count

        from mutation
        where GENETIC_PROFILE_ID = #{geneticProfileId}

        <if test="entrezGeneIds != null and !entrezGeneIds.isEmpty()">
            and ENTREZ_GENE_ID in
            <foreach item="item" collection="entrezGeneIds" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>

         group by ENTREZ_GENE_ID

    </select>

    <select id="countSamplesWithKeywords" resultType="org.mskcc.cbio.portal.model.KeywordSampleCount">

        select

        KEYWORD as keyword,
        count(distinct SAMPLE_ID) as count

        from
        mutation, mutation_event

        where GENETIC_PROFILE_ID = #{geneticProfileId}
        and mutation.MUTATION_EVENT_ID = mutation_event.MUTATION_EVENT_ID
        <if test="keywords != null and !keywords.isEmpty()">
            and KEYWORD in
            <foreach item="item" collection="keywords" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>

        group by KEYWORD
    </select>

    <select id="getGenesOfMutations" resultType="integer">

        select

        distinct ENTREZ_GENE_ID

        from mutation_event

        <where>
            <if test="mutationEventIds != null and !mutationEventIds.isEmpty()">
                MUTATION_EVENT_ID in
                <foreach item="item" collection="mutationEventIds" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
    </select>

    <select id="getKeywordsOfMutations" resultType="string">

        select

        distinct KEYWORD

        from mutation_event

        <where>
            <if test="mutationEventIds != null and !mutationEventIds.isEmpty()">
                MUTATION_EVENT_ID in
                <foreach item="item" collection="mutationEventIds" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
    </select>

    <select id="getMutationsCounts" resultType="org.mskcc.cbio.portal.model.AltCount">

        select

        <if test="perStudy">
            distinct cancer_study.CANCER_STUDY_IDENTIFIER as cancerStudyIdentifier,
        </if>
        <if test="type == 'count'">
            count(patient.INTERNAL_ID) as count
        </if>
        <if test="type == 'frequency'">
            count(patient.INTERNAL_ID) / (select count(sll.SAMPLE_ID) from sample_list_list sll, sample_list sl
            where sl.CATEGORY = 'all_cases_with_mutation_data' and sll.LIST_ID = sl.LIST_ID
            and sl.CANCER_STUDY_ID = cancer_study.CANCER_STUDY_ID) as frequency
        </if>
        from mutation_event, mutation, gene, sample, patient, cancer_study
        where gene.HUGO_GENE_SYMBOL = #{hugoGeneSymbol} and mutation_event.ENTREZ_GENE_ID = gene.ENTREZ_GENE_ID
        <if test="start != null">
            and mutation_event.ONCOTATOR_PROTEIN_POS_START >= #{start}
        </if>
        <if test="end != null">
            and mutation_event.ONCOTATOR_PROTEIN_POS_END <![CDATA[ <= ]]>  #{end}
        </if>
        and mutation_event.MUTATION_EVENT_ID = mutation.MUTATION_EVENT_ID
        and mutation.SAMPLE_ID = sample.INTERNAL_ID
        and sample.PATIENT_ID = patient.INTERNAL_ID
        and cancer_study.CANCER_STUDY_ID = patient.CANCER_STUDY_ID
        <if test="cancerStudyIdentifiers != null and !cancerStudyIdentifiers.isEmpty()">
            and cancer_study.CANCER_STUDY_IDENTIFIER in
            <foreach item="item" collection="cancerStudyIdentifiers" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="perStudy">
            group by  patient.CANCER_STUDY_ID;
        </if>

    </select>

</mapper>
